# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   HAProxy Ingress Controller
# #   --------------------------
# #   This file is automatically updated, do not edit
# #
#

{{- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *  TEMPLATE DECLARATIONS
   *
   *    1. main cfg
   *    2. backend shards
   *
   */}}

{{- if .Cfg }}
    {{- $cfg := .Cfg }}
    {{- $global := $cfg.Global }}
    {{- $userlists := $cfg.Userlists.BuildSortedItems }}
    {{- $tcpbackends := $cfg.TCPBackends.BuildSortedItems }}
    {{- $tcpservices := $cfg.TCPServices.BuildSortedItems }}
    {{- $backends := $cfg.Backends }}
    {{- $backendItems := $backends.BuildSortedItems }}
    {{- $frontend := $cfg.Frontend }}
    {{- $fmaps := $frontend.Maps }}
    {{- $hosts := $cfg.Hosts }}
    {{- template "global" map $global }}
    {{- if $global.DNS.Resolvers }}
        {{- template "dnresolvers" map $global.DNS.Resolvers }}
    {{- end }}
    {{- if $userlists }}
        {{- template "userlists" map $userlists }}
    {{- end }}
    {{- if $global.CustomSections }}
        {{- template "customsections" map $global.CustomSections }}
    {{- end }}
    {{- if $tcpbackends }}
        {{- template "tcpbackends" map $global $tcpbackends }}
    {{- end }}
    {{- if $backendItems }}
        {{- template "backends" map $global $backendItems true }}
    {{- end }}
    {{- template "backend-support" map $global $hosts $backends }}
    {{- template "frontends" map $global $frontend $hosts $fmaps $backends.DefaultBackend $tcpservices }}
    {{- template "frontend-support" map $global }}
{{- else if and .Global .Backends }}
    {{- $global := .Global }}
    {{- $backendItems := .Backends }}
    {{- template "backends" map $global $backendItems false }}
{{- end }}

{{- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *  TEMPLATE DEFINITIONS
   *
   */}}

{{- define "global" }}
{{- $global := .p1 }}
global
{{- if $global.Master.IsMasterWorker }}
    master-worker{{ if not $global.Master.ExitOnFailure }} no-exit-on-failure{{ end }}
{{- else }}
    daemon
{{- end }}
{{- $nonroot := and $global.Security.Username $global.Security.Groupname }}
{{- if $nonroot }}
    user {{ $global.Security.Username }}
    group {{ $global.Security.Groupname }}
{{- end }}
    unix-bind{{ if $nonroot }} user {{ $global.Security.Username }} group {{ $global.Security.Groupname }}{{ end }} mode 0600
{{- if $global.Security.UseChroot }}
    chroot /var/empty
{{- end }}
{{- if gt $global.Procs.Nbproc 1 }}
    nbproc {{ $global.Procs.Nbproc }}
{{- end }}
{{- if $global.Procs.Nbthread }}
    nbthread {{ $global.Procs.Nbthread }}
{{- end }}
{{- if $global.Procs.CPUMap }}
    cpu-map {{ $global.Procs.CPUMap }}
{{- end }}
    stats socket {{ default "--" $global.AdminSocket }} level admin expose-fd listeners mode 600
        {{- if gt $global.Procs.Nbproc 1 }} process 1{{ end }}
{{- if $global.Timeout.Stats }}
    stats timeout {{ $global.Timeout.Stats }}
{{- end }}
{{- if $global.LoadServerState }}
    server-state-file state-global
    server-state-base {{ $global.LocalFSPrefix }}/var/lib/haproxy/
{{- end }}
    maxconn {{ $global.MaxConn }}
{{- if $global.Timeout.Stop }}
    hard-stop-after {{ $global.Timeout.Stop }}
{{- end }}
{{- if and $global.Master.IsMasterWorker $global.Master.WorkerMaxReloads }}
    mworker-max-reloads {{ $global.Master.WorkerMaxReloads }}
{{- end }}
{{- if $global.Syslog.Endpoint }}
    log {{ $global.Syslog.Endpoint }} len {{ $global.Syslog.Length }} format {{ $global.Syslog.Format }} local0
    log-tag {{ $global.Syslog.Tag }}
{{- end }}
{{- if or (not $global.External.IsExternal) $global.External.HasLua }}
    lua-prepend-path {{ $global.LocalFSPrefix }}/etc/haproxy/lua/?.lua
    lua-load {{ $global.LocalFSPrefix }}/etc/haproxy/lua/auth-request.lua
{{- end }}
    lua-load {{ $global.LocalFSPrefix }}/etc/haproxy/lua/services.lua
{{- if $global.SSL.DHParam.Filename }}
    ssl-dh-param-file {{ $global.SSL.DHParam.Filename }}
{{- else }}
    tune.ssl.default-dh-param {{ $global.SSL.DHParam.DefaultMaxSize }}
{{- end }}
{{- if $global.SSL.Engine }}
    ssl-engine {{ $global.SSL.Engine }}
{{- if $global.SSL.ModeAsync }}
    ssl-mode-async
{{- end }}
{{- end }}
{{- if $global.SSL.Ciphers }}
    ssl-default-bind-ciphers {{ $global.SSL.Ciphers }}
{{- end }}
{{- if $global.SSL.CipherSuites }}
    ssl-default-bind-ciphersuites {{ $global.SSL.CipherSuites }}
{{- end }}
{{- if $global.SSL.Options }}
    ssl-default-bind-options {{ $global.SSL.Options }}
{{- end }}
{{- if $global.SSL.BackendCiphers }}
    ssl-default-server-ciphers {{ $global.SSL.BackendCiphers }}
{{- end }}
{{- if $global.SSL.BackendCipherSuites }}
    ssl-default-server-ciphersuites {{ $global.SSL.BackendCipherSuites }}
{{- end }}
{{- range $snippet := $global.CustomConfig }}
    {{ $snippet }}
{{- end }}

defaults
    log global
{{- if $global.LoadServerState }}
    load-server-state-from-file global
{{- end }}
    maxconn {{ $global.MaxConn }}
{{- if $global.DrainSupport.Drain }}
    option persist
{{- if $global.DrainSupport.Redispatch }}
    option redispatch
{{- end }}
{{- else }}
    option redispatch
{{- end }}
    option dontlognull
    option http-server-close
    option http-keep-alive
{{- if not $global.UseHTX }}
    no option http-use-htx
{{- end }}
    timeout client          {{ default "--" $global.Timeout.Client }}
{{- if $global.Timeout.ClientFin }}
    timeout client-fin      {{ $global.Timeout.ClientFin }}
{{- end }}
    timeout connect         {{ default "--" $global.Timeout.Connect }}
{{- if $global.Timeout.KeepAlive }}
    timeout http-keep-alive {{ $global.Timeout.KeepAlive }}
{{- end }}
{{- if $global.Timeout.HTTPRequest }}
    timeout http-request    {{ $global.Timeout.HTTPRequest }}
{{- end }}
{{- if $global.Timeout.Queue }}
    timeout queue           {{ $global.Timeout.Queue }}
{{- end }}
    timeout server          {{ default "--" $global.Timeout.Server }}
{{- if $global.Timeout.ServerFin }}
    timeout server-fin      {{ $global.Timeout.ServerFin }}
{{- end }}
{{- if $global.Timeout.Tunnel }}
    timeout tunnel          {{ $global.Timeout.Tunnel }}
{{- end }}
{{- range $snippet := $global.CustomDefaults }}
    {{ $snippet }}
{{- end }}
{{- end }}{{/* define "global" */}}


{{- define "dnresolvers" }}
{{- $resolvers := .p1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     DNS RESOLVERS
#
{{- range $resolver := $resolvers }}
resolvers {{ $resolver.Name }}
{{- range $ns := $resolver.Nameservers }}
    nameserver {{ $ns.Name }} {{ $ns.Endpoint }}
{{- end }}
    accepted_payload_size {{ $resolver.AcceptedPayloadSize }}
    hold obsolete         {{ $resolver.HoldObsolete }}
    hold valid            {{ $resolver.HoldValid }}
    timeout retry         {{ $resolver.TimeoutRetry }}
{{- end }}
{{- end }}{{/* define "dnresolvers" */}}


{{- define "userlists" }}
{{- $userlists := .p1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     USER LISTS
#
{{- range $userlist := $userlists }}
userlist {{ $userlist.Name }}
{{- range $user := $userlist.Users }}
    user {{ $user.Name }} {{ if not $user.Encrypted }}insecure-{{ end }}password {{ $user.Passwd }}
{{- end }}
{{- end }}
{{- end }}{{/* define "userlists" */}}


{{- define "customsections" }}
{{- $customSections := .p1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     CUSTOM SECTIONS
#
{{- range $l := $customSections }}
{{ $l }}
{{- end }}
{{- end }}


{{- define "tcpbackends" }}
{{- $global := .p1 }}
{{- $tcpbackends := .p2 }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   TCP SERVICES (legacy, via configmap)
# #
#

{{- range $backend := $tcpbackends }}
{{- $proxy_name := printf "_tcp_%s_%d" $backend.Name $backend.Port }}
listen {{ $proxy_name }}
{{- $ssl := $backend.SSL }}
    bind {{ $global.Bind.TCPBindIP }}:{{ $backend.Port }}
        {{- if $ssl.Filename }} ssl crt {{ $ssl.Filename }}
            {{- if $ssl.CAFilename }} ca-file {{ $ssl.CAFilename }} verify required
                {{- if $ssl.CRLFilename }} crl-file {{ $ssl.CRLFilename }}{{ end }}
            {{- end }}
        {{- end }}
        {{- if $backend.ProxyProt.Decode }} accept-proxy{{ end }}
    mode tcp

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.TCPLogFormat "default" }}
    option tcplog
{{- else if $global.Syslog.TCPLogFormat }}
    log-format {{ $global.Syslog.TCPLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomTCP }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $proxy_name }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $outProxyProtVersion := $backend.ProxyProt.EncodeVersion }}
{{- range $ep := $backend.Endpoints }}
    server {{ $ep.Name }} {{ $ep.Target }}
        {{- if $backend.CheckInterval }} check port {{ $ep.Port }} inter {{ $backend.CheckInterval }}{{ end }}
        {{- if eq $outProxyProtVersion "v1" }} send-proxy
            {{- else if eq $outProxyProtVersion "v2" }} send-proxy-v2
        {{- end }}
{{- end }}

{{- end }}{{/* range TCPBackends */}}
{{- end }}{{/* define "tcpbackends" */}}


{{- define "backends" }}
{{- $global := .p1 }}
{{- $backendItems := .p2 }}
{{- $shared := .p3 }}
{{- if $shared }}

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   BACKENDS
# #
#
{{- end }}
{{- range $backend := $backendItems }}
backend {{ $backend.ID }}
    mode {{ if $backend.ModeTCP }}tcp{{ else }}http{{ end }}
{{- if $backend.BalanceAlgorithm }}
    balance {{ $backend.BalanceAlgorithm }}
{{- end }}
{{- $timeout := $backend.Timeout }}
{{- if $timeout.Connect }}
    timeout connect {{ $timeout.Connect }}
{{- end }}
{{- if $timeout.KeepAlive }}
    timeout http-keep-alive {{ $timeout.KeepAlive }}
{{- end }}
{{- if $timeout.HTTPRequest }}
    timeout http-request {{ $timeout.HTTPRequest }}
{{- end }}
{{- if $timeout.Queue }}
    timeout queue {{ $timeout.Queue }}
{{- end }}
{{- if $timeout.Server }}
    timeout server {{ $timeout.Server }}
{{- end }}
{{- if $timeout.ServerFin }}
    timeout server-fin {{ $timeout.ServerFin }}
{{- end }}
{{- if $timeout.Tunnel }}
    timeout tunnel {{ $timeout.Tunnel }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.Connections $backend.Limit.RPS }}
    stick-table type ip size 200k expire 5m store conn_cur,conn_rate(1s)
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.HealthCheck.URI }}
    option httpchk {{ $backend.HealthCheck.URI }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*              MODE TCP              */}}
{{- /*------------------------------------*/}}
{{- if $backend.ModeTCP }}

{{- /*------------------------------------*/}}
{{- range $r1 := short 10 $backend.AllowedIPTCP.Rule }}
    acl allow_rule_tcp src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $backend.AllowedIPTCP.Exception }}
    acl allow_exception_tcp src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- range $r1 := short 10 $backend.DeniedIPTCP.Rule }}
    acl deny_rule_tcp src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $backend.DeniedIPTCP.Exception }}
    acl deny_exception_tcp src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- if $backend.AllowedIPTCP.Exception }}
    tcp-request content reject if allow_exception_tcp
{{- end }}
{{- if $backend.AllowedIPTCP.Rule }}
    tcp-request content reject if !allow_rule_tcp
{{- end }}
{{- if or $backend.DeniedIPTCP.Rule $backend.DeniedIPTCP.Exception }}
    tcp-request content reject if
        {{- if $backend.DeniedIPTCP.Rule }} deny_rule_tcp{{ end }}
        {{- if $backend.DeniedIPTCP.Exception }} !deny_exception_tcp{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.RPS $backend.Limit.Connections }}
    tcp-request content track-sc1 src
{{- if $backend.Limit.Whitelist }}
{{- range $w1 := short 10 $backend.Limit.Whitelist }}
    acl wlist_conn src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
{{- end }}
{{- if $backend.Limit.Connections }}
    tcp-request content reject if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_cur gt {{ $backend.Limit.Connections }} }
{{- end }}
{{- if $backend.Limit.RPS }}
    tcp-request content reject if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_rate gt {{ $backend.Limit.RPS }} }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*             MODE HTTP              */}}
{{- /*------------------------------------*/}}
{{- else }}{{/*** if $backend.ModeTCP ***/}}

{{- /*------------------------------------*/}}
{{- $hasPlainHTTPSocket := not $global.Bind.ShareHTTPPort }}
{{- $hasFrontingProxy := $global.Bind.HasFrontingProxy }}
{{- $frontingUseProto := and $hasFrontingProxy $global.Bind.FrontingUseProto }}
{{- $frontingIgnoreProto := and $hasFrontingProxy (not $global.Bind.FrontingUseProto) }}
{{- if $frontingUseProto }}
{{- if $hasPlainHTTPSocket }}
    acl fronting-proxy so_id {{ $global.Bind.FrontingSockID }}
{{- else }}
    acl fronting-proxy hdr(X-Forwarded-Proto) -m found
{{- end }}
{{- end }}
{{- if and (not $frontingIgnoreProto) (or $backend.HasHSTS $backend.HasSSLRedirect) }}
    acl https-request ssl_fc
{{- if $frontingUseProto }}
    acl https-request var(txn.proto) -m str https
{{- end }}
{{- end }}
{{- if $backend.TLS.HasTLSAuth }}
    acl local-offload ssl_fc
{{- end }}

{{- /*------------------------------------*/}}
{{- if and $frontingUseProto $backend.HasHSTS }}
    http-request set-var(txn.proto) hdr(X-Forwarded-Proto)
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.NeedACL }}
{{- range $path := $backend.Paths }}
    # {{ $path.ID }} = {{ $path.Hostname }}{{ $path.Path }}
{{- end }}
{{- range $match := $backend.PathsMap.MatchFiles }}
    http-request set-var(txn.pathID) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(txn.pathID) -m found }{{ end }}
{{- end }}
{{- $pathsHasHost := $backend.PathsMap.HasHost }}
{{- range $match := $backend.PathsDefaultHostMap.MatchFiles }}
    http-request set-var(txn.pathID) var(req.path)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if or $pathsHasHost (not $match.First) }} if !{ var(txn.pathID) -m found }{{ end }}
{{- end }}
{{- end }}

{{- /* * Snippet of per-path configuration
   *
{{- $attrCfg := $backend.PathConfig "Attr" }}
{{- range $i, $attr := $attrCfg.Items }}
{{- range $pathIDs := $attrCfg.PathIDs $i }}
    some haproxy keyword {{ $attr }}
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
   *
   * */}}

{{- /*------------------------------------*/}}
{{- if $frontingUseProto }}
    http-request redirect scheme https
        {{- if $global.SSL.RedirectCode }} code {{ $global.SSL.RedirectCode }}{{ end }}
        {{- "" }} if fronting-proxy !{ hdr(X-Forwarded-Proto) https }
{{- end }}

{{- /*------------------------------------*/}}
{{- if not $frontingIgnoreProto }}
{{- $sslredirCfg := $backend.PathConfig "SSLRedirect" }}
{{- range $i, $sslredir := $sslredirCfg.Items }}
{{- if $sslredir }}
{{- range $pathIDs := $sslredirCfg.PathIDs $i }}
    http-request redirect scheme https
        {{- if $global.SSL.RedirectCode }} code {{ $global.SSL.RedirectCode }}{{ end }}
        {{- "" }} if{{ if $hasFrontingProxy }} !fronting-proxy{{ end }} !https-request
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.RPS $backend.Limit.Connections }}
    http-request track-sc1 src
{{- if $backend.Limit.Whitelist }}
{{- range $w1 := short 10 $backend.Limit.Whitelist }}
    acl wlist_conn src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
{{- end }}
{{- if $backend.Limit.Connections }}
    http-request deny deny_status 429 if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_cur gt {{ $backend.Limit.Connections }} }
{{- end }}
{{- if $backend.Limit.RPS }}
    http-request deny deny_status 429 if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_rate gt {{ $backend.Limit.RPS }} }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $allowCfg := $backend.PathConfig "AllowedIPHTTP" }}
{{- $denyCfg := $backend.PathConfig "DeniedIPHTTP" }}
{{- range $i, $allow := $allowCfg.Items }}
{{- range $r1 := short 10 $allow.Rule }}
    acl allow_rule_src{{ $i }} src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $allow.Exception }}
    acl allow_exception_src{{ $i }} src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- if $allow.SourceHeader }}
    http-request set-src hdr({{ $allow.SourceHeader }})
{{- end }}
{{- range $pathIDs := $allowCfg.PathIDs $i }}
{{- if $allow.Exception }}
    http-request deny if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} allow_exception_src{{ $i }}
{{- end }}
{{- if $allow.Rule }}
    http-request deny if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} !allow_rule_src{{ $i }}
{{- end }}
{{- end }}
{{- end }}
{{- range $i, $deny := $denyCfg.Items }}
{{- if or $deny.Rule $deny.Exception }}
{{- range $r1 := short 10 $deny.Rule }}
    acl deny_rule_src{{ $i }} src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $deny.Exception }}
    acl deny_exception_src{{ $i }} src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- range $pathIDs := $denyCfg.PathIDs $i }}
    http-request deny if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- if $deny.Rule }} deny_rule_src{{ $i }}{{ end }}
        {{- if $deny.Exception }} !deny_exception_src{{ $i }}{{ end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $authHTTPCfg := $backend.PathConfig "AuthHTTP" }}
{{- range $i, $authHTTP := $authHTTPCfg.Items }}
{{- if $authHTTP.UserlistName }}
{{- range $pathIDs := $authHTTPCfg.PathIDs $i }}
    http-request auth
        {{- if $authHTTP.Realm }} realm "{{ $authHTTP.Realm }}"{{ end }}
        {{- "" }} if{{ if and $backend.HasCorsEnabled }} !METH_OPTIONS{{ end }}
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} !{ http_auth({{ $authHTTP.UserlistName }}) }
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $maxbodyCfg := $backend.PathConfig "MaxBodySize" }}
{{- range $i, $maxbody := $maxbodyCfg.Items }}
{{- if $maxbody }}
{{- range $pathIDs := $maxbodyCfg.PathIDs $i }}
    http-request use-service lua.send-413 if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} { req.body_size,sub({{ $maxbody }}) gt 0 }
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if and $global.ModSecurity.Endpoints $backend.HasModsec }}
    filter spoe engine modsecurity config {{ $global.LocalFSPrefix }}/etc/haproxy/spoe-modsecurity.conf
{{- $wafCfg := $backend.PathConfig "WAF" }}
{{- range $i, $waf := $wafCfg.Items }}
{{- if eq $waf.Mode "deny" }}
{{- range $pathIDs := $wafCfg.PathIDs $i }}
    http-request deny if { var(txn.modsec.code) -m int gt 0 }
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $header := $backend.Headers }}
    http-request set-header {{ $header.Name }} {{ $header.Value }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.TLS.HasTLSAuth }}
{{- $needSSLACL := not $backend.HasSSLRedirect }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-CN   %{+Q}[ssl_c_s_dn(cn)]{{ if $needSSLACL }}   if local-offload{{ end }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-DN   %{+Q}[ssl_c_s_dn]{{ if $needSSLACL }}       if local-offload{{ end }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1 %{+Q}[ssl_c_sha1,hex
        {{- if $backend.TLS.FingerprintLower }},lower{{ end }}]
        {{- if $needSSLACL }}   if local-offload{{ end }}
{{- if $backend.TLS.AddCertHeader }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-Cert %{+Q}[ssl_c_der,base64]{{ if $needSSLACL }} if local-offload{{ end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $corsCfg := $backend.PathConfig "Cors" }}
{{- range $i, $cors := $corsCfg.Items }}
{{- if and $cors.Enabled $cors.AllowOrigin }}
{{- $dynamicOrigin := gt (len $cors.AllowOrigin) 1 }}
{{- if $dynamicOrigin }}
    http-request set-var(txn.hdr_origin{{ $i }}) req.hdr(Origin)
{{- end }}
{{- range $pathIDs := $corsCfg.PathIDs $i }}
    http-request set-var(txn.cors_max_age) str({{ $cors.MaxAge }}) if METH_OPTIONS
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
    http-request use-service lua.send-cors-preflight if METH_OPTIONS
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if eq $global.ForwardFor "add" }}
    http-request set-header X-Original-Forwarded-For %[hdr(x-forwarded-for)] if { hdr(x-forwarded-for) -m found }
    http-request del-header x-forwarded-for
    option forwardfor
{{- else if eq $global.ForwardFor "update" }}
    option forwardfor
{{- else if eq $global.ForwardFor "ifmissing" }}
    option forwardfor if-none
{{- end }}

{{- /*------------------------------------*/}}
{{- $authCfg := $backend.PathConfig "AuthExternal" }}
{{- range $i, $auth := $authCfg.Items }}
{{- range $pathIDs := $authCfg.PathIDs $i }}
{{- if $auth.AlwaysDeny }}
    http-request deny
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- else }}
{{- if $auth.AuthBackendName }}
    http-request set-header X-Real-IP %[src]
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
    http-request lua.auth-intercept {{ $auth.AuthBackendName }} {{ $auth.AuthPath }} {{ $auth.Method }}
        {{- printf " '%s' '%s' '%s'" ($auth.HeadersRequest | join ",") ($auth.HeadersSucceed | join ",") ($auth.HeadersFail | join ",") }}
        {{- if or $auth.AllowedPath $pathIDs }} if{{ end }}
        {{- if $auth.AllowedPath }} !{ path_beg {{ $auth.AllowedPath }} }{{ end }}
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- if $auth.RedirectOnFail }}
    http-request redirect location {{ $auth.RedirectOnFail }}
{{- else }}
    http-request deny
{{- end }}
        {{- "" }} if !{ var(txn.auth_response_successful) -m bool }
        {{- if $auth.AllowedPath }} !{ path_beg {{ $auth.AllowedPath }} }{{ end }}
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- range $header, $attr := $auth.HeadersVars }}
    http-request set-header {{ $header }} %[var({{ $attr }})] if { var({{ $attr }}) -m found }
        {{- if $auth.AllowedPath }} !{ path_beg {{ $auth.AllowedPath }} }{{ end }}
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.Cookie.Name }}
{{- $cookie := $backend.Cookie }}
    cookie {{ $cookie.Name }} {{ $cookie.Strategy }}
        {{- if $cookie.Preserve }} preserve{{ end }}
        {{- if $cookie.SameSite }} attr SameSite=None secure{{ end }}
        {{- if $cookie.Keywords }} {{ $cookie.Keywords }}{{ end }}
        {{- if $cookie.Domain }} domain {{ $cookie.Domain }}{{ end }}
        {{- if $cookie.Shared }}
            {{- range $hostname := $backend.Hostnames }} domain {{ $hostname }}{{ end }}
        {{- end }}
        {{- if $cookie.Dynamic }} dynamic{{ end }}
{{- if $cookie.Dynamic }}
    dynamic-cookie-key "{{ $global.Cookie.Key }}"
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $backend.CustomConfig }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $backend.ID }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $rewriteCfg := $backend.PathConfig "RewriteURL" }}
{{- $needACL := $rewriteCfg.NeedACL }}
{{- range $i, $rewrite := $rewriteCfg.Items }}
{{- if $rewrite }}
{{- range $path := ($rewriteCfg.Paths $i) }}
{{- if eq $rewrite "/" }}
    http-request replace-path ^{{ $path.Path }}/?(.*)$     {{ $rewrite }}\1
        {{- if $needACL }}     if { var(txn.pathID) -m str {{ $path.ID }} }{{ end }}
{{- else }}
    http-request replace-path ^{{ $path.Path }}(.*)$       {{ $rewrite }}{{ if hasSuffix $path.Path "/" }}/{{ end }}\1
        {{- if $needACL }}     if { var(txn.pathID) -m str {{ $path.ID }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $hstsCfg := $backend.PathConfig "HSTS" }}
{{- range $i, $hsts := $hstsCfg.Items }}
{{- if $hsts.Enabled }}
{{- $paths := $hstsCfg.Paths $i }}
{{- $needSSLACL := and (not $frontingIgnoreProto) (not ($backend.HasSSLRedirectPaths $paths)) }}
{{- range $pathIDs := $hstsCfg.PathIDs $i }}
    http-response set-header Strict-Transport-Security "max-age={{ $hsts.MaxAge }}
        {{- if $hsts.Subdomains }}; includeSubDomains{{ end }}
        {{- if $hsts.Preload }}; preload{{ end }}"
        {{- if or $needSSLACL $pathIDs }} if
            {{- if $needSSLACL }} https-request{{ end }}
            {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $i, $cors := $corsCfg.Items }}
{{- if and $cors.Enabled $cors.AllowOrigin }}
{{- $dynamicOrigin := gt (len $cors.AllowOrigin) 1 }}
{{- if $dynamicOrigin }}
{{- range $a1 := short 5 $cors.AllowOrigin }}
    acl cors_allow_origin{{ $i }} var(txn.hdr_origin{{ $i }}) -m str{{ range $a := $a1 }} {{ $a }}{{ end }}
{{- end }}
{{- end }}
{{- range $pathIDs := $corsCfg.PathIDs $i }}
    http-response set-header Access-Control-Allow-Origin
        {{- if $dynamicOrigin }}  "%[var(txn.hdr_origin{{ $i }})]"{{ else }}  "{{ index $cors.AllowOrigin 0 }}"{{ end }}
        {{- if or $dynamicOrigin $pathIDs }} if
            {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
            {{- if $dynamicOrigin }} cors_allow_origin{{ $i }}{{ end }}
        {{- end }}
{{- if $dynamicOrigin }}
    http-response set-header Access-Control-Allow-Origin  "{{ index $cors.AllowOrigin 0 }}"
        {{- "" }} if{{ if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} !cors_allow_origin{{ $i }}
{{- end }}
    http-response set-header Access-Control-Allow-Methods "{{ $cors.AllowMethods }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
    http-response set-header Access-Control-Allow-Headers "{{ $cors.AllowHeaders }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- if $cors.AllowCredentials }}
    http-response set-header Access-Control-Allow-Credentials "{{ $cors.AllowCredentials }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- if $cors.ExposeHeaders }}
    http-response set-header Access-Control-Expose-Headers "{{ $cors.ExposeHeaders }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- if $dynamicOrigin }}
    http-response set-header Vary %[res.hdr(Vary)],Origin
        {{- "" }} if { res.hdr(Vary) -m found }
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
    http-response set-header Vary Origin
        {{- "" }} if ! { res.hdr(Vary) -m found }
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}{{/*** if $backend.ModeTCP ***/}}

{{- /*------------------------------------*/}}
{{- if $backend.Resolver }}
{{- $dnsPort := iif (ne $backend.DNSPort "") $backend.DNSPort $backend.Port }}
{{- $portIsNumber := ne (int64 $dnsPort) 0 }}
    server-template srv {{ len $backend.Endpoints }}
        {{- " " }}{{ if not $portIsNumber }}_{{ $dnsPort }}._tcp.{{ end }}
        {{- $backend.Name }}.{{ $backend.Namespace }}.svc.{{ $global.DNS.ClusterDomain }}
        {{- if $portIsNumber }}:{{ $dnsPort }}{{ end }}
        {{- "" }} resolvers {{ $backend.Resolver }} resolve-prefer ipv4 init-addr none
        {{- "" }} weight {{ $backend.Server.InitialWeight }}
        {{- template "backend" map $backend }}
{{- else }}
{{- /* Iterate twice because header takes precedence */}}
{{- if $backend.BlueGreen.HeaderName }}
{{- range $ep := $backend.Endpoints }}
{{- if $ep.Label }}
    use-server {{ $ep.Name }} if { req.hdr({{ $backend.BlueGreen.HeaderName }}) {{ $ep.Label }} }
{{- end }}
{{- end }}
{{- end }}
{{- if $backend.BlueGreen.CookieName }}
{{- range $ep := $backend.Endpoints }}
{{- if $ep.Label }}
    use-server {{ $ep.Name }} if { req.cook({{ $backend.BlueGreen.CookieName }}) {{ $ep.Label }} }
{{- end }}
{{- end }}
{{- end }}
{{- range $ep := $backend.Endpoints }}
    server {{ $ep.Name }} {{ $ep.IP }}:{{ $ep.Port }}
        {{- if not $ep.Enabled }} disabled{{ end }}
        {{- "" }} weight {{ $ep.Weight }}
        {{- if and ($backend.CookieAffinity) ($ep.CookieValue) }} cookie {{ $ep.CookieValue }}{{ end }}
        {{- if $ep.SourceIP }} source {{ $ep.SourceIP }}{{ end }}
        {{- if $ep.PUID }} id {{ $ep.PUID }}{{ end }}
        {{- template "backend" map $backend }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}{{/* define "backends" */}}

{{- define "backend" }}
    {{- $backend := .p1 }}
    {{- $server := $backend.Server }}
    {{- if eq $server.Protocol "h2" }} proto h2
        {{- if $server.Secure }} alpn h2{{ end }}
    {{- end }}
    {{- if $server.MaxConn }} maxconn {{ $server.MaxConn }}{{ end }}
    {{- if $server.MaxQueue }} maxqueue {{ $server.MaxQueue }}{{ end }}
    {{- if $server.Secure }} ssl
        {{- if $server.Ciphers }} ciphers {{ $server.Ciphers }}{{ end }}
        {{- if $server.CipherSuites }} ciphersuites {{ $server.CipherSuites }}{{ end }}
        {{- if $server.Options }} {{ $server.Options }}{{ end }}
        {{- if $server.CrtFilename }} crt {{ $server.CrtFilename }}{{ end }}
        {{- if $server.SNI }} sni {{ $server.SNI }}{{ end }}
        {{- if $server.CAFilename }} verify required ca-file {{ $server.CAFilename }}
            {{- if $server.CRLFilename }} crl-file {{ $server.CRLFilename }}{{ end }}
            {{- if $server.VerifyHost }} verifyhost {{ $server.VerifyHost }}{{ end }}
        {{- else }} verify none
        {{- end }}
    {{- end }}
    {{- if $server.SendProxy }} {{ $server.SendProxy }}{{ end }}
    {{- $agent := $backend.AgentCheck }}
    {{- $hc := $backend.HealthCheck }}
    {{- if or $hc.Port $hc.Addr $hc.Interval $hc.RiseCount $hc.FallCount }} check
        {{- if $hc.Port }} port {{ $hc.Port }}{{ end }}
        {{- if $hc.Addr }} addr {{ $hc.Addr }}{{ end }}
        {{- if $hc.Interval }} inter {{ $hc.Interval }}{{ end }}
        {{- if $hc.RiseCount }} rise {{ $hc.RiseCount }}{{ end }}
        {{- if $hc.FallCount }} fall {{ $hc.FallCount }}{{ end }}
    {{- end }}
    {{- if $agent.Port }} agent-check agent-port {{ $agent.Port }}
        {{- if $agent.Addr }} agent-addr {{ $agent.Addr }}{{ end }}
        {{- if $agent.Interval }} agent-inter {{ $agent.Interval }}{{ end }}
        {{- if $agent.Send }} agent-send {{ $agent.Send }}{{ end }}
    {{- end }}
{{- end }}


{{- define "backend-support" }}
{{- $global := .p1 }}
{{- $hosts := .p2 }}
{{- $backends := .p3 }}

{{- if $hosts.HasSSLPassthrough }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Support
#
backend _redirect_https
    mode http
{{- range $snippet := index $global.CustomProxy "_redirect_https" }}
    {{ $snippet }}
{{- end }}
    http-request redirect scheme https
        {{- if $global.SSL.RedirectCode }} code {{ $global.SSL.RedirectCode }}{{ end }}
{{- end }}

{{- if $global.Acme.Enabled }}

  # # # # # # # # # # # # # # # # # # #
# #
#     acme challenge server
#
backend _acme_challenge
    mode http
{{- range $snippet := index $global.CustomProxy "_acme_challenge" }}
    {{ $snippet }}
{{- end }}
    server _acme_server unix@{{ $global.Acme.Socket }}
{{- end }}

{{- if not $backends.DefaultBackend }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Error pages
#
backend _error404
    mode http
{{- range $snippet := index $global.CustomProxy "_error404" }}
    {{ $snippet }}
{{- end }}
{{- if $global.DefaultBackendRedir }}
    redirect location {{ $global.DefaultBackendRedir }} code {{ $global.DefaultBackendRedirCode }}
{{- else }}
    http-request use-service lua.send-404
{{- end }}
{{- end }}

{{- end }}{{/* define "backend-support" */}}


{{- define "frontends" }}
{{- $global := .p1 }}
{{- $frontend := .p2 }}
{{- $hosts := .p3 }}
{{- $fmaps := .p4 }}
{{- $defaultbackend := .p5 }}
{{- $tcpservices := .p6 }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   FRONTENDS
# #
#
{{- if $frontend.AuthProxy.BindList }}

{{- $proxy := $frontend.AuthProxy }}
{{- $use_socket := gt (len $proxy.BindList) 1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Authentication External
#
### helper backends used by auth-request.lua
### using tcp ports - haproxy-lua-http.lua doesn't support unix socket
{{- range $bind := $proxy.BindList }}
backend {{ $bind.AuthBackendName }}
    mode http
{{- range $snippet := index $global.CustomProxy $bind.AuthBackendName }}
    {{ $snippet }}
{{- end }}
    server {{ $bind.AuthBackendName }} 127.0.0.1:{{ $bind.LocalPort }}
{{- end }}

{{- /*------------------------------------*/}}
frontend {{ $proxy.Name }}
    mode http
{{- range $bind := $proxy.BindList }}
    bind 127.0.0.1:{{ $bind.LocalPort }}
        {{- if $use_socket }} id {{ $bind.SocketID }}{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.AuthLogFormat "default" }}
    option httplog
{{- else if $global.Syslog.AuthLogFormat }}
    log-format {{ $global.Syslog.AuthLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := index $global.CustomProxy $proxy.Name }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $bind := $proxy.BindList }}
    use_backend {{ $bind.Backend }}
        {{- if $use_socket }} if { so_id {{ $bind.SocketID }} }{{ end }}
{{- end }}
{{- end }}

{{- if $tcpservices }}

  # # # # # # # # # # # # # # # # # # #
# #
#     TCP SERVICES frontends
#
{{- range $tcpport := $tcpservices }}
{{- $proxy_name := printf "_front_tcp_%d" $tcpport.Port }}
frontend {{ $proxy_name }}
{{- $tls := $tcpport.TLS }}
    bind {{ $global.Bind.TCPBindIP }}:{{ $tcpport.Port }}
        {{- if $tcpport.ProxyProt }} accept-proxy{{ end }}
        {{- if $tls.TLSFilename }}
            {{- "" }} ssl crt {{ $tls.TLSFilename }}
            {{- if $tls.ALPN }} alpn {{ $tls.ALPN }}{{ end }}
            {{- if $tls.CAFilename }}
                {{- "" }} ca-file {{ $tls.CAFilename }} verify {{ if $tls.CAVerifyOptional}}optional{{ else }}required{{ end }}
                {{- if $tls.CRLFilename }} crl-file {{ $tls.CRLFilename }}{{ end }}
            {{- end }}
            {{- if $tls.Ciphers }} ciphers {{ $tls.Ciphers }}{{ end }}
            {{- if $tls.CipherSuites }} ciphersuites {{ $tls.CipherSuites }}{{ end }}
            {{- if $tls.Options }} {{ $tls.Options }}{{ end }}
        {{- end }}
    mode tcp

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $tcpport.LogFormat "default" }}
    option tcplog
{{- else if $tcpport.LogFormat }}
    log-format {{ $tcpport.LogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $tcpport.SNIMap.HasHost }}
    tcp-request inspect-delay 5s
{{- range $match := $tcpport.SNIMap.MatchFiles }}
    tcp-request content set-var(req.tcpback) {{ if $tls.TLSFilename }}ssl_fc_sni{{ else }}req.ssl_sni{{ end }},lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.tcpback) -m found }{{ end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := index $global.CustomProxy $proxy_name }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := $tcpport.CustomConfig }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $tcpport.SNIMap.HasHost }}
    tcp-request content accept if { req.ssl_hello_type 1 }
    use_backend %[var(req.tcpback)] if { var(req.tcpback) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $tcpport.DefaultHost }}
{{- $backend := $tcpport.DefaultHost.Backend }}
{{- if not $backend.IsEmpty }}
    default_backend {{ $backend }}
{{- end }}
{{- end }}
{{- end }}{{/* range $tcpservices */}}
{{- end }}{{/* has $tcpservices */}}

{{- if $hosts.HasSSLPassthrough }}

  # # # # # # # # # # # # # # # # # # #
# #
#     TCP/TLS frontend
#
{{- $proxy__front__tls := "_front__tls" }}
listen {{ $proxy__front__tls }}
    mode tcp
    bind {{ $global.Bind.HTTPSBind }}{{ if $global.Bind.AcceptProxy }} accept-proxy{{ end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.HTTPSLogFormat "default" }}
    option tcplog
{{- else if $global.Syslog.HTTPSLogFormat }}
    log-format {{ $global.Syslog.HTTPSLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    tcp-request inspect-delay 5s

{{- /*------------------------------------*/}}
{{- range $match := $fmaps.SSLPassthroughMap.MatchFiles }}
    tcp-request content set-var(req.sslpassback) req.ssl_sni,lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.sslpassback) -m found }{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := index $global.CustomProxy $proxy__front__tls }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
    tcp-request content accept if { req.ssl_hello_type 1 }

{{- /*------------------------------------*/}}
    use_backend %[var(req.sslpassback)] if { var(req.sslpassback) -m found }
{{- $defaultHost := $hosts.DefaultHost }}
{{- if $defaultHost }}
{{- if $defaultHost.SSLPassthrough }}
{{- range $path := $defaultHost.Paths }}
{{- if eq $path.Path "/" }}
    use_backend {{ $path.Backend.ID }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
    server _default_server{{ $frontend.BindName }} {{ $frontend.BindSocket }} send-proxy-v2
{{- end }}{{/* HasSSLPassthrough */}}

{{- if $fmaps }}

{{- $hasFrontingProxy := $global.Bind.HasFrontingProxy }}
{{- $frontingUseProto := and $hasFrontingProxy $global.Bind.FrontingUseProto }}
{{- $frontingIgnoreProto := and $hasFrontingProxy (not $global.Bind.FrontingUseProto) }}

  # # # # # # # # # # # # # # # # # # #
# #
#     HTTP{{ if $hasFrontingProxy }} & Fronting Proxy{{ end }} frontend
#
{{- $proxy__front_http := "_front_http" }}
frontend {{ $proxy__front_http }}
    mode http
{{- $hasPlainHTTPSocket := not $global.Bind.ShareHTTPPort }}
{{- if and $global.Bind.HTTPBind $hasPlainHTTPSocket }}
    bind {{ $global.Bind.HTTPBind }}{{ if $global.Bind.AcceptProxy }} accept-proxy{{ end }}
{{- end }}
{{- if $global.Bind.FrontingBind }}
    bind {{ $global.Bind.FrontingBind }}
        {{- if and $hasPlainHTTPSocket $global.Bind.FrontingSockID }} id {{ $global.Bind.FrontingSockID }}{{ end }}
        {{- if $global.Bind.AcceptProxy }} accept-proxy{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $frontingUseProto }}
{{- if $hasPlainHTTPSocket }}
    acl fronting-proxy so_id {{ $global.Bind.FrontingSockID }}
{{- else }}
    acl fronting-proxy hdr(X-Forwarded-Proto) -m found
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if $global.Syslog.HTTPLogFormat }}
    log-format {{ $global.Syslog.HTTPLogFormat }}
{{- else }}
    option httplog
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Acme.Enabled }}
    acl acme-challenge path_beg {{ $global.Acme.Prefix }}
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-var(req.path) path
    http-request set-var(req.host) hdr(host),field(1,:),lower
    http-request set-var(req.base) var(req.host),concat(\#,req.path)

{{- /*------------------------------------*/}}
{{- $acmeexclusive := and $global.Acme.Enabled (not $global.Acme.Shared) }}
{{- if $fmaps.RedirFromRootMap.HasHost }}
{{- range $match := $fmaps.RedirFromRootMap.MatchFiles }}
    http-request set-var(req.rootredir) var(req.host)
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.rootredir) -m found }{{ end }}
{{- end }}
    http-request redirect location %[var(req.rootredir)]
        {{- "" }} if{{ if $acmeexclusive }} !acme-challenge{{ end }}
        {{- "" }} { path / } { var(req.rootredir) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $fmaps.VarNamespaceMap.HasHost }}
{{- range $match := $fmaps.VarNamespaceMap.MatchFiles }}
    http-request set-var(txn.namespace) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(txn.namespace) -m found }{{ end }}
{{- end }}
    http-request set-var(txn.namespace) str(-)
        {{- "" }} if !{ var(txn.namespace) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if not $frontingIgnoreProto }}
    http-request set-header X-Forwarded-Proto http
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-CN
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-DN
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-Cert
        {{- if $hasFrontingProxy }} if !fronting-proxy{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- template "redirectTo" map $frontend $fmaps }}

{{- /*------------------------------------*/}}
{{- range $match := $fmaps.HTTPHostMap.MatchFiles }}
    http-request set-var(req.backend) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.backend) -m found }{{ end }}
{{- end }}
{{- range $match := $fmaps.DefaultHostMap.MatchFiles }}
    http-request set-var(req.defaultbackend) var(req.path)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- "" }} if !{ var(req.backend) -m found }{{- if not $match.First }} !{ var(req.defaultbackend) -m found }{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- template "redirectFrom" map $frontend $fmaps "req.backend" }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontend }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $proxy__front_http }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $acmeexclusive }}
    use_backend _acme_challenge if acme-challenge
{{- end }}
    use_backend %[var(req.backend)] if { var(req.backend) -m found }
{{- if and $global.Acme.Enabled $global.Acme.Shared }}
    use_backend _acme_challenge if acme-challenge
{{- end }}

{{- if $hosts.DefaultHost }}
{{- if $hosts.DefaultHost.HTTPPassthroughBackend }}
    use_backend {{ $hosts.DefaultHost.HTTPPassthroughBackend }}
{{- end }}
{{- end }}
{{- template "defaultbackend" map $hosts $defaultbackend }}

  # # # # # # # # # # # # # # # # # # #
# #
#     HTTPS frontend
#
{{- $proxy__front_https := "_front_https" }}
frontend {{ $proxy__front_https }}
    mode http

{{- /*------------------------------------*/}}
{{- if $frontend.BindSocket }}
    bind {{ $frontend.BindSocket }}
        {{- if $frontend.BindID }} id {{ $frontend.BindID }}{{ end }}
        {{- if $frontend.AcceptProxy }} accept-proxy{{ end }}
        {{- "" }} ssl alpn {{ $global.SSL.ALPN }}
        {{- "" }} crt-list {{ $frontend.CrtListFile }}
        {{- "" }} ca-ignore-err all crt-ignore-err all
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if $global.Syslog.HTTPLogFormat }}
    log-format {{ $global.Syslog.HTTPLogFormat }}
{{- else }}
    option httplog
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-var(req.path) path
    http-request set-var(req.host) hdr(host),field(1,:),lower
    http-request set-var(req.base) var(req.host),concat(\#,req.path)

{{- /*------------------------------------*/}}
{{- template "redirectTo" map $frontend $fmaps }}

{{- /*------------------------------------*/}}
{{- range $match := $fmaps.HTTPSHostMap.MatchFiles }}
    http-request set-var(req.hostbackend) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- ""}},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.hostbackend) -m found }{{ end }}
{{- end }}
{{- range $match := $fmaps.DefaultHostMap.MatchFiles }}
    http-request set-var(req.defaultbackend) var(req.path)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- "" }} if !{ var(req.hostbackend) -m found }{{- if not $match.First }} !{ var(req.defaultbackend) -m found }{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- template "redirectFrom" map $frontend $fmaps "req.hostbackend" }}

{{- /*------------------------------------*/}}
{{- if $fmaps.RedirFromRootMap.HasHost }}
{{- range $match := $fmaps.RedirFromRootMap.MatchFiles }}
    http-request set-var(req.rootredir) var(req.host)
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.rootredir) -m found }{{ end }}
{{- end }}
    http-request redirect location %[var(req.rootredir)] if { path / } { var(req.rootredir) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $fmaps.VarNamespaceMap.HasHost }}
{{- range $match := $fmaps.VarNamespaceMap.MatchFiles }}
    http-request set-var(txn.namespace) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(txn.namespace) -m found }{{ end }}
{{- end }}
    http-request set-var(txn.namespace) str(-)
        {{- "" }} if !{ var(txn.namespace) -m found }
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-header X-Forwarded-Proto https
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-CN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-DN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-Cert

{{- /*------------------------------------*/}}
{{- if $fmaps.TLSAuthList.HasHost }}
{{- $mandatory := $fmaps.TLSNeedCrtList.HasHost }}
    acl tls-has-crt ssl_c_used

{{- if $mandatory }}
{{- range $match := $fmaps.TLSNeedCrtList.MatchFiles }}
    acl tls-need-crt ssl_fc_sni -i -m {{ $match.Method }} -f {{ $match.Filename }}
{{- end }}
{{- end }}

{{- range $match := $fmaps.TLSNeedCrtList.MatchFiles }}
    acl tls-host-need-crt var(req.host) -i -m {{ $match.Method }} -f {{ $match.Filename }}
{{- end }}
    acl tls-has-invalid-crt ssl_c_verify gt 0
{{- range $match := $fmaps.TLSAuthList.MatchFiles }}
    acl tls-check-crt ssl_fc_sni -i -m {{ $match.Method }} -f {{ $match.Filename }}
{{- end }}

{{- if $fmaps.HTTPSSNIMap.HasHost }}
    http-request set-var(req.snibase) ssl_fc_sni,lower,concat(\#,req.path)
{{- range $match := $fmaps.HTTPSSNIMap.MatchFiles }}
    http-request set-var(req.snibackend) var(req.snibase)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.snibackend) -m found }{{ end }}
{{- end }}
{{- range $match := $fmaps.HTTPSSNIMap.MatchFiles }}
    http-request set-var(req.snibackend) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- "" }} if !{ var(req.snibackend) -m found } !tls-has-crt
        {{- if $fmaps.TLSNeedCrtList.HasHost }} !tls-host-need-crt{{ end }}
{{- end }}
{{- end }}

{{- if $mandatory }}
{{- if not $fmaps.TLSMissingCrtPagesMap.HasHost }}
    http-request set-var(req.tls_nocrt_redir) str(_internal) if !tls-has-crt tls-need-crt
{{- end }}
{{- range $match := $fmaps.TLSMissingCrtPagesMap.MatchFiles }}
    http-request set-var(req.tls_nocrt_redir) ssl_fc_sni,lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }},_internal) if
        {{- if $match.First }} !tls-has-crt tls-need-crt
        {{- else }} { var(req.tls_nocrt_redir) -m str _internal }{{ end }}
{{- end }}
{{- end }}

{{- if not $fmaps.TLSInvalidCrtPagesMap.HasHost }}
    http-request set-var(req.tls_invalidcrt_redir) str(_internal) if tls-has-invalid-crt tls-check-crt
{{- end }}
{{- range $match := $fmaps.TLSInvalidCrtPagesMap.MatchFiles }}
    http-request set-var(req.tls_invalidcrt_redir) ssl_fc_sni,lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }},_internal) if
        {{- if $match.First }} tls-has-invalid-crt tls-check-crt
        {{- else }} { var(req.tls_invalidcrt_redir) -m str _internal }{{ end }}
{{- end }}
{{- if and $mandatory $fmaps.TLSMissingCrtPagesMap.HasHost }}
    http-request redirect location %[var(req.tls_nocrt_redir)] code 303
        {{- "" }} if { var(req.tls_nocrt_redir) -m found } !{ var(req.tls_nocrt_redir) -m str _internal }
{{- end }}
{{- if $fmaps.TLSInvalidCrtPagesMap.HasHost }}
    http-request redirect location %[var(req.tls_invalidcrt_redir)] code 303
        {{- "" }} if { var(req.tls_invalidcrt_redir) -m found } !{ var(req.tls_invalidcrt_redir) -m str _internal }
{{- end }}

{{- end }}{{/* if $fmaps.TLSAuthList.HasHost */}}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontend }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $proxy__front_https }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $fmaps.TLSAuthList.HasHost }}
    http-request use-service lua.send-421 if
        {{- "" }} tls-has-crt { ssl_fc_has_sni } !{ ssl_fc_sni,strcmp(req.host) eq 0 }
{{- if $fmaps.TLSNeedCrtList.HasHost }}
    http-request use-service lua.send-496 if
        {{- "" }} { var(req.tls_nocrt_redir) -m str _internal }
{{- /* HTTP 421 instead of 404 if missing sni or the provided one doesn't read client crt. */}}
{{- /* Waiting move the tls-auth stuff to the backend to implement a proper config. */}}
    http-request use-service lua.send-421 if
        {{- "" }} !tls-has-crt tls-host-need-crt
{{- end }}
    http-request use-service lua.send-495 if
        {{- "" }} { var(req.tls_invalidcrt_redir) -m str _internal }
{{- end }}

{{- /*------------------------------------*/}}
    use_backend %[var(req.hostbackend)]
        {{- "" }} if { var(req.hostbackend) -m found }
{{- if $fmaps.TLSAuthList.HasHost }}
    use_backend %[var(req.snibackend)]
        {{- "" }} if { var(req.snibackend) -m found }
{{- end }}
{{- template "defaultbackend" map $hosts $defaultbackend }}

{{- end }}{{/* has $fmaps */}}
{{- end }}{{/* define "frontends" */}}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "redirectFrom" }}
{{- $frontend := .p1 }}
{{- $fmaps := .p2 }}
{{- $varbe := .p3 }}
{{- if $fmaps.RedirFromMap.MatchFiles }}
{{- range $match := $fmaps.RedirFromMap.MatchFiles }}
    http-request set-var(req.redirdest) var(req.host)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- "" }} if !{ var({{ $varbe }}) -m found }
        {{- if not $match.First }} !{ var(req.redirdest) -m found }{{ end }}
{{- end }}
    http-request redirect prefix //%[var(req.redirdest)]
        {{- "" }} code {{ $frontend.RedirectFromCode }}
        {{- "" }} if { var(req.redirdest) -m found }
{{- end }}
{{- end }}

{{- define "redirectTo" }}
{{- $frontend := .p1 }}
{{- $fmaps := .p2 }}
{{- if $fmaps.RedirToMap.MatchFiles }}
{{- range $match := $fmaps.RedirToMap.MatchFiles }}
    http-request set-var(req.redirto) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.redirto) -m found }{{ end }}
{{- end }}
    http-request redirect location %[var(req.redirto)]
        {{- "" }} code {{ $frontend.RedirectToCode }}
        {{- "" }} if { var(req.redirto) -m found }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "defaultbackend" }}
{{- $hosts := .p1 }}
{{- $defaultbackend := .p2 }}
{{- $defaultHost := $hosts.DefaultHost }}
{{- if $defaultHost }}
{{- if not $defaultHost.SSLPassthrough }}
    use_backend %[var(req.defaultbackend)]
{{- end }}
{{- end }}
{{- if $defaultbackend }}
    default_backend {{ $defaultbackend.ID }}
{{- else }}
    default_backend _error404
{{- end }}
{{- end }}

{{- define "frontend-support" }}
{{- $global := .p1 }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   SUPPORT
# #
#

  # # # # # # # # # # # # # # # # # # #
# #
#     Stats
#
listen stats
    mode http
    bind {{ $global.Stats.BindIP }}:{{ $global.Stats.Port }}
        {{- if $global.Stats.TLSFilename }} ssl crt {{ $global.Stats.TLSFilename }}{{ end }}
        {{- if $global.Stats.AcceptProxy }} accept-proxy{{ end }}
        {{- if gt $global.Procs.Nbproc 1 }} process 1{{ end }}
{{- if $global.Stats.Auth }}
    stats realm HAProxy\ Statistics
    stats auth {{ $global.Stats.Auth }}
{{- end }}
    stats enable
    stats uri /
    no log
    option httpclose
    stats show-legends
{{- range $snippet := index $global.CustomProxy "stats" }}
    {{ $snippet }}
{{- end }}

{{- if $global.Prometheus.Port }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Prometheus metrics
#
frontend prometheus
    mode http
    bind {{ $global.Prometheus.BindIP }}:{{ $global.Prometheus.Port }}
    http-request use-service prometheus-exporter if { path /metrics }
    http-request use-service lua.send-prometheus-root if { path / }
    http-request use-service lua.send-404
    no log
{{- range $snippet := index $global.CustomProxy "prometheus" }}
    {{ $snippet }}
{{- end }}
{{- end }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Monitor URI
#
frontend healthz
    mode http
    bind {{ $global.Healthz.BindIP }}:{{ $global.Healthz.Port }}
    monitor-uri /healthz
    http-request use-service lua.send-404
    no log
{{- range $snippet := index $global.CustomProxy "healthz" }}
    {{ $snippet }}
{{- end }}

{{- if $global.ModSecurity.Endpoints }}

  # # # # # # # # # # # # # # # # # # #
# #
#     ModSecurity Agent
#
backend spoe-modsecurity
    mode tcp
    timeout connect {{ $global.ModSecurity.Timeout.Connect }}
    timeout server  {{ $global.ModSecurity.Timeout.Server }}
{{- range $snippet := index $global.CustomProxy "spoe-modsecurity" }}
    {{ $snippet }}
{{- end }}
{{- range $i, $endpoint := $global.ModSecurity.Endpoints }}
    server modsec-spoa{{ $i }} {{ $endpoint }}
{{- end }}
{{- end }}

{{- end }}{{/* define "frontend-support" */}}
