# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   HAProxy Ingress Controller
# #   --------------------------
# #   This file is automatically updated, do not edit
# #
#

{{- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *  TEMPLATE DECLARATIONS
   *
   *    1. main cfg
   *    2. backend shards
   *
   */}}

{{- if .Cfg }}
    {{- $cfg := .Cfg }}
    {{- $global := $cfg.Global }}
    {{- $userlists := $cfg.Userlists.BuildSortedItems }}
    {{- $tcpbackends := $cfg.TCPBackends.BuildSortedItems }}
    {{- $tcpservices := $cfg.TCPServices.BuildSortedItems }}
    {{- $backends := $cfg.Backends }}
    {{- $backendItems := $backends.BuildSortedItems }}
    {{- $frontends := $cfg.Frontends }}
    {{- template "global" map $global }}
    {{- if $global.Peers.Servers }}
        {{- template "peers" map $global }}
    {{- end }}
    {{- if $global.DNS.Resolvers }}
        {{- template "dnresolvers" map $global.DNS.Resolvers }}
    {{- end }}
    {{- if $userlists }}
        {{- template "userlists" map $userlists }}
    {{- end }}
    {{- if $global.CustomSections }}
        {{- template "customsections" map $global.CustomSections }}
    {{- end }}
    {{- if $tcpbackends }}
        {{- template "tcpbackends" map $global $tcpbackends }}
    {{- end }}
    {{- if $backendItems }}
        {{- template "backends" map $global $backendItems true }}
    {{- end }}
    {{- template "backend-support" map $global $backends }}
    {{- template "frontends" map $global $frontends $backends $tcpservices }}
    {{- template "frontend-support" map $global }}
{{- else if and .Global .Backends }}
    {{- $global := .Global }}
    {{- $backendItems := .Backends }}
    {{- template "backends" map $global $backendItems false }}
{{- end }}

{{- /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *
   *  TEMPLATE DEFINITIONS
   *
   */}}

{{- define "global" }}
{{- $global := .p1 }}
global
{{- with $global.Peers.LocalPeer.Name }}
    localpeer {{ . }}
{{- end }}
{{- if $global.Master.IsMasterWorker }}
    master-worker{{ if not $global.Master.ExitOnFailure }} no-exit-on-failure{{ end }}
{{- else }}
    daemon
{{- end }}
{{- $nonroot := and $global.Security.Username $global.Security.Groupname }}
{{- if $nonroot }}
    user {{ $global.Security.Username }}
    group {{ $global.Security.Groupname }}
{{- end }}
    unix-bind{{ if $nonroot }} user {{ $global.Security.Username }} group {{ $global.Security.Groupname }}{{ end }} mode 0600
{{- if $global.Security.UseChroot }}
    chroot /var/empty
{{- end }}
{{- if gt $global.Procs.Nbproc 1 }}
    nbproc {{ $global.Procs.Nbproc }}
{{- end }}
{{- if $global.Procs.Nbthread }}
    nbthread {{ $global.Procs.Nbthread }}
{{- end }}
{{- if $global.Procs.CPUMap }}
    cpu-map {{ $global.Procs.CPUMap }}
{{- end }}
    stats socket {{ default "--" $global.AdminSocket }} level admin expose-fd listeners mode 600
        {{- if gt $global.Procs.Nbproc 1 }} process 1{{ end }}
{{- if $global.Timeout.Stats }}
    stats timeout {{ $global.Timeout.Stats }}
{{- end }}
{{- if $global.LoadServerState }}
    server-state-file state-global
    server-state-base {{ $global.LocalFSPrefix }}/var/lib/haproxy/
{{- end }}
    maxconn {{ $global.MaxConn }}
{{- if $global.Timeout.Stop }}
    hard-stop-after {{ $global.Timeout.Stop }}
{{- end }}
{{- if and $global.Master.IsMasterWorker $global.Master.WorkerMaxReloads }}
    mworker-max-reloads {{ $global.Master.WorkerMaxReloads }}
{{- end }}
{{- if $global.Syslog.Endpoint }}
    log {{ $global.Syslog.Endpoint }} len {{ $global.Syslog.Length }} format {{ $global.Syslog.Format }} local0
    log-tag {{ $global.Syslog.Tag }}
{{- end }}
{{- if or (not $global.External.IsExternal) $global.External.HasLua }}
    lua-prepend-path {{ $global.LocalFSPrefix }}/etc/haproxy/lua/?.lua
    lua-load-per-thread {{ $global.LocalFSPrefix }}/etc/haproxy/lua/auth-request.lua
{{- end }}
    lua-load-per-thread {{ $global.LocalFSPrefix }}/etc/haproxy/lua/services.lua
    lua-load-per-thread {{ $global.LocalFSPrefix }}/etc/haproxy/lua/responses.lua
{{- if $global.Peers.Servers }}
    lua-load-per-thread {{ $global.LocalFSPrefix }}/etc/haproxy/lua/peers.lua
{{- end }}
{{- if $global.SSL.DHParam.Filename }}
    ssl-dh-param-file {{ $global.SSL.DHParam.Filename }}
{{- else }}
    tune.ssl.default-dh-param {{ $global.SSL.DHParam.DefaultMaxSize }}
{{- end }}
{{- if $global.SSL.Engine }}
    ssl-engine {{ $global.SSL.Engine }}
{{- if $global.SSL.ModeAsync }}
    ssl-mode-async
{{- end }}
{{- end }}
{{- if $global.SSL.Ciphers }}
    ssl-default-bind-ciphers {{ $global.SSL.Ciphers }}
{{- end }}
{{- if $global.SSL.CipherSuites }}
    ssl-default-bind-ciphersuites {{ $global.SSL.CipherSuites }}
{{- end }}
{{- if $global.SSL.Options }}
    ssl-default-bind-options {{ $global.SSL.Options }}
{{- end }}
{{- if $global.SSL.BackendCiphers }}
    ssl-default-server-ciphers {{ $global.SSL.BackendCiphers }}
{{- end }}
{{- if $global.SSL.BackendCipherSuites }}
    ssl-default-server-ciphersuites {{ $global.SSL.BackendCipherSuites }}
{{- end }}
{{- range $snippet := $global.CustomConfig }}
    {{ $snippet }}
{{- end }}

defaults
    log global
{{- if $global.LoadServerState }}
    load-server-state-from-file global
{{- end }}
    maxconn {{ $global.MaxConn }}
{{- if $global.DrainSupport.Drain }}
    option persist
{{- if $global.DrainSupport.Redispatch }}
    option redispatch
{{- end }}
{{- else }}
    option redispatch
{{- end }}
    option dontlognull
    option http-server-close
    option http-keep-alive
{{- if not $global.UseHTX }}
    no option http-use-htx
{{- end }}
{{- range $response := $global.CustomHTTPResponses.HAProxy }}
    errorfile {{ $response.Name }} {{ $global.LocalFSPrefix }}/etc/haproxy/errorfiles/{{ $response.Name }}-{{ $global.CustomHTTPResponses.ID }}.http
{{- end }}
    timeout client          {{ default "--" $global.Timeout.Client }}
{{- if $global.Timeout.ClientFin }}
    timeout client-fin      {{ $global.Timeout.ClientFin }}
{{- end }}
    timeout connect         {{ default "--" $global.Timeout.Connect }}
{{- if $global.Timeout.KeepAlive }}
    timeout http-keep-alive {{ $global.Timeout.KeepAlive }}
{{- end }}
{{- if $global.Timeout.HTTPRequest }}
    timeout http-request    {{ $global.Timeout.HTTPRequest }}
{{- end }}
{{- if $global.Timeout.Queue }}
    timeout queue           {{ $global.Timeout.Queue }}
{{- end }}
    timeout server          {{ default "--" $global.Timeout.Server }}
{{- if $global.Timeout.ServerFin }}
    timeout server-fin      {{ $global.Timeout.ServerFin }}
{{- end }}
{{- if $global.Timeout.Tunnel }}
    timeout tunnel          {{ $global.Timeout.Tunnel }}
{{- end }}
{{- /* Coraza will crash if the unique-id isn't set, which requires us to set the format here */}}
{{- if $global.ModSecurity.UseCoraza }}
    unique-id-format        %[uuid()]
{{- end }}
{{- range $snippet := $global.CustomDefaults }}
    {{ $snippet }}
{{- end }}
{{- end }}{{/* define "global" */}}


{{- define "peers" }}
{{- $global := .p1 }}
{{- $peers := $global.Peers }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Peers
#
peers {{ $peers.SectionName }}
    bind {{ $peers.LocalPeer.Endpoint }}
{{- range $snippet := $global.CustomPeers }}
    {{ $snippet }}
{{- end }}
{{- range $server := $peers.Servers }}
    server {{ $server.Name }}{{ if ne $peers.LocalPeer.Name $server.Name }} {{ $server.Endpoint }}{{ end }}
{{- end }}

{{- if $peers.Tables }}
{{- /* backend naming follows rules implemented on `updater.buildPeersTableName()` */}}

# Local stick tables
{{- range $server := $peers.Servers }}
# {{ $server.BESuffix }}: haproxy pod "{{ $server.Name }}"
{{- end }}
{{- range $table := $peers.Tables }}
{{- range $server := $peers.Servers }}
backend _peers_{{ $table.GroupName }}_{{ $server.BESuffix }}
    {{ $table.Table }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}


{{- define "dnresolvers" }}
{{- $resolvers := .p1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     DNS RESOLVERS
#
{{- range $resolver := $resolvers }}
resolvers {{ $resolver.Name }}
{{- range $ns := $resolver.Nameservers }}
    nameserver {{ $ns.Name }} {{ $ns.Endpoint }}
{{- end }}
    accepted_payload_size {{ $resolver.AcceptedPayloadSize }}
    hold obsolete         {{ $resolver.HoldObsolete }}
    hold valid            {{ $resolver.HoldValid }}
    timeout retry         {{ $resolver.TimeoutRetry }}
{{- end }}
{{- end }}{{/* define "dnresolvers" */}}


{{- define "userlists" }}
{{- $userlists := .p1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     USER LISTS
#
{{- range $userlist := $userlists }}
userlist {{ $userlist.Name }}
{{- range $user := $userlist.Users }}
    user {{ $user.Name }} {{ if not $user.Encrypted }}insecure-{{ end }}password {{ $user.Passwd }}
{{- end }}
{{- end }}
{{- end }}{{/* define "userlists" */}}


{{- define "customsections" }}
{{- $customSections := .p1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     CUSTOM SECTIONS
#
{{- range $l := $customSections }}
{{ $l }}
{{- end }}
{{- end }}


{{- define "tcpbackends" }}
{{- $global := .p1 }}
{{- $tcpbackends := .p2 }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   TCP SERVICES (legacy, via configmap)
# #
#

{{- range $backend := $tcpbackends }}
{{- $proxy_name := printf "_tcp_%s_%d" $backend.Name $backend.Port }}
listen {{ $proxy_name }}
{{- $ssl := $backend.SSL }}
    bind {{ $global.TCPBindIP }}:{{ $backend.Port }}
        {{- if $ssl.Filename }} ssl crt {{ $ssl.Filename }}
            {{- if $ssl.CAFilename }} ca-file {{ $ssl.CAFilename }} verify required
                {{- if $ssl.CRLFilename }} crl-file {{ $ssl.CRLFilename }}{{ end }}
            {{- end }}
        {{- end }}
        {{- if $backend.ProxyProt.Decode }} accept-proxy{{ end }}
    mode tcp

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.TCPLogFormat "default" }}
    option tcplog
{{- else if $global.Syslog.TCPLogFormat }}
    log-format {{ $global.Syslog.TCPLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomTCP }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $proxy_name }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $outProxyProtVersion := $backend.ProxyProt.EncodeVersion }}
{{- range $ep := $backend.Endpoints }}
    server {{ $ep.Name }} {{ $ep.Target }}
        {{- if $backend.CheckInterval }} check port {{ $ep.Port }} inter {{ $backend.CheckInterval }}{{ end }}
        {{- if eq $outProxyProtVersion "v1" }} send-proxy
            {{- else if eq $outProxyProtVersion "v2" }} send-proxy-v2
        {{- end }}
{{- end }}

{{- end }}{{/* range TCPBackends */}}
{{- end }}{{/* define "tcpbackends" */}}


{{- define "backends" }}
{{- $global := .p1 }}
{{- $backendItems := .p2 }}
{{- $shared := .p3 }}
{{- if $shared }}

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   BACKENDS
# #
#
{{- end }}
{{- range $backend := $backendItems }}
backend {{ $backend.ID }}
    mode {{ if $backend.ModeTCP }}tcp{{ else }}http{{ end }}
{{- if $backend.BalanceAlgorithm }}
    balance {{ $backend.BalanceAlgorithm }}
{{- end }}
{{- $timeout := $backend.Timeout }}
{{- if $timeout.Connect }}
    timeout connect {{ $timeout.Connect }}
{{- end }}
{{- if $timeout.KeepAlive }}
    timeout http-keep-alive {{ $timeout.KeepAlive }}
{{- end }}
{{- if $timeout.HTTPRequest }}
    timeout http-request {{ $timeout.HTTPRequest }}
{{- end }}
{{- if $timeout.Queue }}
    timeout queue {{ $timeout.Queue }}
{{- end }}
{{- if $timeout.Server }}
    timeout server {{ $timeout.Server }}
{{- end }}
{{- if $timeout.ServerFin }}
    timeout server-fin {{ $timeout.ServerFin }}
{{- end }}
{{- if $timeout.Tunnel }}
    timeout tunnel {{ $timeout.Tunnel }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $response := $backend.CustomHTTPResponses.HAProxy }}
    errorfile {{ $response.Name }} {{ $global.LocalFSPrefix }}/etc/haproxy/errorfiles/{{ $response.Name }}-{{ $backend.CustomHTTPResponses.ID }}.http
{{- end }}
{{- range $snippet := $backend.CustomConfigEarly }}
    {{ $snippet }}
{{- end }}
{{- if or $backend.Limit.Connections $backend.Limit.RPS }}
    stick-table type ip size 200k expire 5m store conn_cur,conn_rate(1s)
{{- end }}
{{- with $backend.Server.FastCGIApp }}
    filter fcgi-app {{ . }}
    use-fcgi-app {{ . }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.HealthCheck.URI }}
    option httpchk {{ $backend.HealthCheck.URI }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*              MODE TCP              */}}
{{- /*------------------------------------*/}}
{{- if $backend.ModeTCP }}

{{- /*------------------------------------*/}}
{{- range $r1 := short 10 $backend.AllowedIPTCP.Rule }}
    acl allow_rule_tcp src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $backend.AllowedIPTCP.Exception }}
    acl allow_exception_tcp src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- range $r1 := short 10 $backend.DeniedIPTCP.Rule }}
    acl deny_rule_tcp src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $backend.DeniedIPTCP.Exception }}
    acl deny_exception_tcp src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- if $backend.AllowedIPTCP.Exception }}
    tcp-request content reject if allow_exception_tcp
{{- end }}
{{- if $backend.AllowedIPTCP.Rule }}
    tcp-request content reject if !allow_rule_tcp
{{- end }}
{{- if or $backend.DeniedIPTCP.Rule $backend.DeniedIPTCP.Exception }}
    tcp-request content reject if
        {{- if $backend.DeniedIPTCP.Rule }} deny_rule_tcp{{ end }}
        {{- if $backend.DeniedIPTCP.Exception }} !deny_exception_tcp{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.RPS $backend.Limit.Connections }}
    tcp-request content track-sc1 src
{{- if $backend.Limit.Whitelist }}
{{- range $w1 := short 10 $backend.Limit.Whitelist }}
    acl wlist_conn src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
{{- end }}
{{- if $backend.Limit.Connections }}
    tcp-request content reject if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_cur gt {{ $backend.Limit.Connections }} }
{{- end }}
{{- if $backend.Limit.RPS }}
    tcp-request content reject if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_rate gt {{ $backend.Limit.RPS }} }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $backend.CustomConfigLate }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $backend.ID }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*             MODE HTTP              */}}
{{- /*------------------------------------*/}}
{{- else }}{{/*** if $backend.ModeTCP ***/}}

{{- /*------------------------------------*/}}
{{- $hasNone := 0 }}
{{- $hasSome := 1 }}
{{- $hasOnly := 2 }}
{{- $hasFrontingProxy := $backend.HasFrontingProxy }}
{{- $hasFrontingUseProto := $backend.HasFrontingUseProto }}
{{- if $hasFrontingProxy }}
{{- if eq $hasFrontingProxy $hasSome }}
    acl fronting-proxy var(req.fronting_proxy) -m found
{{- end }}
{{- if eq $hasFrontingUseProto $hasSome }}
    acl https-request var(req.fronting_proto) -m str ignore
{{- end }}
{{- if $hasFrontingUseProto }}
    acl https-request hdr(X-Forwarded-Proto) https
{{- end }}
{{- else if or $backend.HasHSTS $backend.HasSSLRedirect }}
    acl https-request ssl_fc
{{- end }}
{{- $needOffloadACL := and ($backend.HasHTTPRequests) (not $backend.HasSSLRedirect) }}
{{- $hasTLSAuth := $backend.HasTLSAuth }}
{{- if and $needOffloadACL $hasTLSAuth }}
    acl local-offload ssl_fc
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.NeedACL }}
{{- $needFrontendACL := $backend.NeedFrontendACL }}
{{- range $pathsMap := $backend.PathsMaps }}
{{- range $path := $pathsMap.Paths }}
    # {{ $path.ID }} = {{ if $needFrontendACL }}fe:{{ join "/" $pathsMap.Frontends }} -- host/path:{{ end }}{{ $path.Hostname }}{{ $path.Path }}
{{- end }}
{{- end }}
{{- if $needFrontendACL }}
    http-request set-var-fmt(req.fe) "%f"
{{- end }}
{{- range $pathsMap := $backend.PathsMaps }}
{{- range $match := $pathsMap.ReqMap.MatchFiles }}
    http-request set-var(txn.pathID) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if $needFrontendACL }} if { var(req.fe) -m str {{ join " " $pathsMap.Frontends }} }{{ end }}
        {{- template "httpFilters" map $match "txn.pathID" (not $needFrontendACL) }}
{{- end }}
{{- $pathsHasHost := $pathsMap.ReqMap.HasHost }}
{{- range $match := $pathsMap.DefMap.MatchFiles }}
    http-request set-var(txn.pathID) str(<default>\#),concat(,req.path)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if or $needFrontendACL $pathsHasHost (not $match.First) }} if
            {{- if $needFrontendACL }} { var(req.fe) -m str {{ join " " $pathsMap.Frontends }} }{{ end }}
            {{- if or $pathsHasHost (not $match.First) }} !{ var(txn.pathID) -m found }{{ end }}
            {{- template "httpFilters" map $match "" 0 }}
        {{- else }}
            {{- template "httpFilters" map $match "" 1 }}
        {{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /* * Snippet of per-path configuration
   *
{{- $attrCfg := $backend.PathConfig "Attr" }}
{{- range $i, $attr := $attrCfg.Items }}
{{- range $pathIDs := $attrCfg.PathIDs $i }}
    some haproxy keyword {{ $attr }}
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
   *
   * */}}

{{- /*------------------------------------*/}}
{{- if $hasFrontingUseProto }}
    http-request redirect scheme https
        {{- if $global.SSL.RedirectCode }} code {{ $global.SSL.RedirectCode }}{{ end }}
        {{- if or (eq $hasFrontingProxy $hasSome) ($hasFrontingUseProto) }} if
            {{- if eq $hasFrontingProxy $hasSome }} fronting-proxy{{ end }}
            {{- if $hasFrontingUseProto }} !https-request{{ end }}
        {{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if ne $hasFrontingProxy $hasOnly }}
{{- $sslredirCfg := $backend.PathConfig "SSLRedirect" }}
{{- range $i, $sslredir := $sslredirCfg.Items }}
{{- if $sslredir }}
{{- range $pathIDs := $sslredirCfg.PathIDs $i }}
    http-request redirect scheme https
        {{- if $global.SSL.RedirectCode }} code {{ $global.SSL.RedirectCode }}{{ end }}
        {{- "" }} if {{ if $hasFrontingProxy }}!fronting-proxy{{ else }}!https-request{{ end }}
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if or $backend.Limit.RPS $backend.Limit.Connections }}
    http-request track-sc1 src
{{- if $backend.Limit.Whitelist }}
{{- range $w1 := short 10 $backend.Limit.Whitelist }}
    acl wlist_conn src{{ range $w := $w1 }} {{ $w }}{{ end }}
{{- end }}
{{- end }}
{{- if $backend.Limit.Connections }}
    http-request deny deny_status 429 if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_cur gt {{ $backend.Limit.Connections }} }
{{- end }}
{{- if $backend.Limit.RPS }}
    http-request deny deny_status 429 if
        {{- if $backend.Limit.Whitelist }} !wlist_conn{{ end }}
        {{- "" }} { sc1_conn_rate gt {{ $backend.Limit.RPS }} }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $allowCfg := $backend.PathConfig "AllowedIPHTTP" }}
{{- $denyCfg := $backend.PathConfig "DeniedIPHTTP" }}
{{- range $i, $allow := $allowCfg.Items }}
{{- range $r1 := short 10 $allow.Rule }}
    acl allow_rule_src{{ $i }} src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $allow.Exception }}
    acl allow_exception_src{{ $i }} src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- if $allow.SourceHeader }}
    http-request set-src hdr({{ $allow.SourceHeader }})
{{- end }}
{{- range $pathIDs := $allowCfg.PathIDs $i }}
{{- if $allow.Exception }}
    http-request deny if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} allow_exception_src{{ $i }}
{{- end }}
{{- if $allow.Rule }}
    http-request deny if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} !allow_rule_src{{ $i }}
{{- end }}
{{- end }}
{{- end }}
{{- range $i, $deny := $denyCfg.Items }}
{{- if or $deny.Rule $deny.Exception }}
{{- range $r1 := short 10 $deny.Rule }}
    acl deny_rule_src{{ $i }} src{{ range $r := $r1 }} {{ $r }}{{ end }}
{{- end }}
{{- range $e1 := short 10 $deny.Exception }}
    acl deny_exception_src{{ $i }} src{{ range $e := $e1 }} {{ $e }}{{ end }}
{{- end }}
{{- range $pathIDs := $denyCfg.PathIDs $i }}
    http-request deny if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- if $deny.Rule }} deny_rule_src{{ $i }}{{ end }}
        {{- if $deny.Exception }} !deny_exception_src{{ $i }}{{ end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $authHTTPCfg := $backend.PathConfig "AuthHTTP" }}
{{- range $i, $authHTTP := $authHTTPCfg.Items }}
{{- if $authHTTP.UserlistName }}
{{- range $pathIDs := $authHTTPCfg.PathIDs $i }}
    http-request auth
        {{- if $authHTTP.Realm }} realm "{{ $authHTTP.Realm }}"{{ end }}
        {{- "" }} if{{ if and $backend.HasCorsEnabled }} !METH_OPTIONS{{ end }}
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} !{ http_auth({{ $authHTTP.UserlistName }}) }
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $maxbodyCfg := $backend.PathConfig "MaxBodySize" }}
{{- if and $backend.CustomHTTPResponses.Lua $maxbodyCfg.Items }}
    http-request set-var(txn.lua_scope) str({{ $backend.ID }})
{{- end }}
{{- range $i, $maxbody := $maxbodyCfg.Items }}
{{- if $maxbody }}
{{- range $pathIDs := $maxbodyCfg.PathIDs $i }}
    http-request use-service lua.send-413 if
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} { req.body_size,sub({{ $maxbody }}) gt 0 }
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if and $global.ModSecurity.Endpoints $backend.HasModsec }}
    filter spoe engine modsecurity config {{ $global.LocalFSPrefix }}/etc/haproxy/spoe-modsecurity.conf
{{- $wafCfg := $backend.PathConfig "WAF" }}
{{- range $i, $waf := $wafCfg.Items }}
{{- if eq $waf.Mode "deny" }}
{{- range $pathIDs := $wafCfg.PathIDs $i }}
{{- if $global.ModSecurity.UseCoraza }}
    http-request redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-response redirect code 302 location %[var(txn.coraza.data)] if { var(txn.coraza.action) -m str redirect }
    http-request deny deny_status 403 hdr waf-block "request"  if { var(txn.coraza.action) -m str deny }
    http-response deny deny_status 403 hdr waf-block "response" if { var(txn.coraza.action) -m str deny }
    http-request silent-drop if { var(txn.coraza.action) -m str drop }
    http-response silent-drop if { var(txn.coraza.action) -m str drop }
    http-request deny deny_status 504 if { var(txn.coraza.error) -m int gt 0 }
    http-response deny deny_status 504 if { var(txn.coraza.error) -m int gt 0 }
{{- else }}
    http-request deny if { var(txn.modsec.code) -m int gt 0 }
{{- end }}
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $header := $backend.Headers }}
    http-request set-header {{ $header.Name }} {{ $header.Value }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $hasTLSAuth }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-CN   %{+Q}[ssl_c_s_dn(cn)]{{ if $needOffloadACL }}   if local-offload{{ end }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-DN   %{+Q}[ssl_c_s_dn]{{ if $needOffloadACL }}       if local-offload{{ end }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1 %{+Q}[ssl_c_sha1,hex
        {{- if $backend.TLS.FingerprintLower }},lower{{ end }}]
        {{- if $needOffloadACL }}   if local-offload{{ end }}
{{- if $backend.TLS.Sha2Bits }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-SHA2 %{+Q}[ssl_c_der,sha2({{ $backend.TLS.Sha2Bits }}),hex
        {{- if $backend.TLS.FingerprintLower }},lower{{ end }}]
        {{- if $needOffloadACL }} if local-offload{{ end }}
{{- end }}
{{- if $backend.TLS.AddCertHeader }}
    http-request set-header {{ $global.SSL.HeadersPrefix }}-Client-Cert %{+Q}[ssl_c_der,base64]{{ if $needOffloadACL }} if local-offload{{ end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $corsCfg := $backend.PathConfig "Cors" }}
{{- range $i, $cors := $corsCfg.Items }}
{{- if and $cors.Enabled $cors.AllowOrigin }}
{{- $dynamicOrigin := or $cors.AllowOriginRegex (gt (len $cors.AllowOrigin) 1) }}
{{- if $dynamicOrigin }}
    http-request set-var(txn.hdr_origin{{ $i }}) req.hdr(Origin)
{{- end }}
{{- range $pathIDs := $corsCfg.PathIDs $i }}
    http-request set-var(txn.cors_max_age) str({{ $cors.MaxAge }}) if METH_OPTIONS
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
    http-request use-service lua.send-cors-preflight if METH_OPTIONS
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $authCfg := $backend.PathConfig "AuthExtBack" }}
{{- range $i, $auth := $authCfg.Items }}
{{- range $pathIDs := $authCfg.PathIDs $i }}
{{- template "authExternal" map $auth (iif (eq $pathIDs "") "" (printf "{ var(txn.pathID) -m str %s }" $pathIDs)) }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $backend.Cookie.Name }}
{{- $cookie := $backend.Cookie }}
    cookie {{ $cookie.Name }} {{ $cookie.Strategy }}
        {{- if $cookie.Preserve }} preserve{{ end }}
        {{- if $cookie.SameSite }} attr SameSite=None secure{{ end }}
        {{- if $cookie.Keywords }} {{ $cookie.Keywords }}{{ end }}
        {{- if $cookie.Domain }} domain {{ $cookie.Domain }}{{ end }}
        {{- if $cookie.Shared }}
            {{- range $hostname := $backend.Hostnames }} domain {{ $hostname }}{{ end }}
        {{- end }}
        {{- if $cookie.Dynamic }} dynamic{{ end }}
{{- if $cookie.Dynamic }}
    dynamic-cookie-key "{{ $global.Cookie.Key }}"
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $backend.CustomConfigLate }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $backend.ID }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $rewriteCfg := $backend.PathConfig "RewriteURL" }}
{{- $needACL := $rewriteCfg.NeedACL }}
{{- range $i, $rewrite := $rewriteCfg.Items }}
{{- if $rewrite }}
{{- range $path := $rewriteCfg.Paths $i }}
{{- if eq $rewrite "/" }}
    http-request replace-path ^{{ $path.Path }}/?(.*)$     {{ $rewrite }}\1
        {{- if $needACL }}     if { var(txn.pathID) -m str {{ $path.ID }} }{{ end }}
{{- else }}
    http-request replace-path ^{{ $path.Path }}(.*)$       {{ $rewrite }}{{ if hasSuffix $path.Path "/" }}/{{ end }}\1
        {{- if $needACL }}     if { var(txn.pathID) -m str {{ $path.ID }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- $hstsCfg := $backend.PathConfig "HSTS" }}
{{- range $i, $hsts := $hstsCfg.Items }}
{{- if $hsts.Enabled }}
{{- $paths := $hstsCfg.Paths $i }}
{{- $needSSLACL := not ($backend.HasSSLRedirectPaths $paths) }}
{{- range $pathIDs := $hstsCfg.PathIDs $i }}
    http-response set-header Strict-Transport-Security "max-age={{ $hsts.MaxAge }}
        {{- if $hsts.Subdomains }}; includeSubDomains{{ end }}
        {{- if $hsts.Preload }}; preload{{ end }}"
        {{- if or $needSSLACL $pathIDs (eq $hasFrontingProxy $hasSome) }} if
            {{- if eq $hasFrontingProxy $hasSome }} !fronting-proxy{{ end }}
            {{- if and (not $hasFrontingProxy) $needSSLACL }} https-request{{ end }}
            {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $i, $cors := $corsCfg.Items }}
{{- if and $cors.Enabled $cors.AllowOrigin }}
{{- $dynamicOrigin := or $cors.AllowOriginRegex (gt (len $cors.AllowOrigin) 1) }}
{{- if $dynamicOrigin }}
{{- range $a1 := short 5 $cors.AllowOrigin }}
    acl cors_allow_origin{{ $i }} var(txn.hdr_origin{{ $i }}) -m str{{ range $a := $a1 }} {{ $a }}{{ end }}
{{- end }}
{{- range $a1 := short 5 $cors.AllowOriginRegex }}
    acl cors_allow_origin{{ $i }} var(txn.hdr_origin{{ $i }}) -m reg{{ range $a := $a1 }} {{ $a |haquote }}{{ end }}
{{- end }}
{{- end }}
{{- range $pathIDs := $corsCfg.PathIDs $i }}
    http-response set-header Access-Control-Allow-Origin
        {{- if $dynamicOrigin }}  "%[var(txn.hdr_origin{{ $i }})]"{{ else }}  "{{ index $cors.AllowOrigin 0 }}"{{ end }}
        {{- if or $dynamicOrigin $pathIDs }} if
            {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
            {{- if $dynamicOrigin }} cors_allow_origin{{ $i }}{{ end }}
        {{- end }}
{{- if $dynamicOrigin }}
    http-response set-header Access-Control-Allow-Origin  "{{ index $cors.AllowOrigin 0 }}"
        {{- "" }} if{{ if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
        {{- "" }} !cors_allow_origin{{ $i }}
{{- end }}
    http-response set-header Access-Control-Allow-Methods "{{ $cors.AllowMethods }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
    http-response set-header Access-Control-Allow-Headers "{{ $cors.AllowHeaders }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- if $cors.AllowCredentials }}
    http-response set-header Access-Control-Allow-Credentials "{{ $cors.AllowCredentials }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- if $cors.ExposeHeaders }}
    http-response set-header Access-Control-Expose-Headers "{{ $cors.ExposeHeaders }}"
        {{- if $pathIDs }} if { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- if $dynamicOrigin }}
    http-response set-header Vary %[res.fhdr(Vary)],Origin
        {{- "" }} if { res.hdr(Vary) -m found }
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
    http-response set-header Vary Origin
        {{- "" }} if ! { res.hdr(Vary) -m found }
        {{- if $pathIDs }} { var(txn.pathID) -m str {{ $pathIDs }} }{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}{{/*** if $backend.ModeTCP ***/}}

{{- /*------------------------------------*/}}
{{- if $backend.Resolver }}
{{- $dnsPort := iif (ne $backend.DNSPort "") $backend.DNSPort $backend.Port }}
{{- $portIsNumber := ne (int64 $dnsPort) 0 }}
    server-template srv {{ len $backend.Endpoints }}
        {{- " " }}{{ if not $portIsNumber }}_{{ $dnsPort }}._tcp.{{ end }}
        {{- $backend.Name }}.{{ $backend.Namespace }}.svc.{{ $global.DNS.ClusterDomain }}
        {{- if $portIsNumber }}:{{ $dnsPort }}{{ end }}
        {{- "" }} resolvers {{ $backend.Resolver }} resolve-prefer ipv4 init-addr none
        {{- "" }} weight {{ $backend.Server.InitialWeight }}
        {{- template "backend" map $backend }}
{{- else }}
{{- /* Iterate twice because header takes precedence */}}
{{- if $backend.BlueGreen.HeaderName }}
{{- range $ep := $backend.Endpoints }}
{{- if $ep.Label }}
    use-server {{ $ep.Name }} if { req.hdr({{ $backend.BlueGreen.HeaderName }}) {{ $ep.Label }} }
{{- end }}
{{- end }}
{{- end }}
{{- if $backend.BlueGreen.CookieName }}
{{- range $ep := $backend.Endpoints }}
{{- if $ep.Label }}
    use-server {{ $ep.Name }} if { req.cook({{ $backend.BlueGreen.CookieName }}) {{ $ep.Label }} }
{{- end }}
{{- end }}
{{- end }}
{{- range $ep := $backend.Endpoints }}
    server {{ $ep.Name }} {{ $ep.IP }}:{{ $ep.Port }}
        {{- if not $ep.Enabled }} disabled{{ end }}
        {{- "" }} weight {{ $ep.Weight }}
        {{- if and ($backend.CookieAffinity) ($ep.CookieValue) }} cookie {{ $ep.CookieValue }}{{ end }}
        {{- if $ep.SourceIP }} source {{ $ep.SourceIP }}{{ end }}
        {{- if $ep.PUID }} id {{ $ep.PUID }}{{ end }}
        {{- template "backend" map $backend }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}{{/* define "backends" */}}

{{- define "backend" }}
    {{- $backend := .p1 }}
    {{- $server := $backend.Server }}
    {{- if eq $server.Protocol "h2" }} proto h2
        {{- if $server.Secure }} alpn h2{{ end }}
    {{- else if eq $server.Protocol "fcgi" }} proto {{ $server.Protocol }}{{ end }}
    {{- if $server.MaxConn }} maxconn {{ $server.MaxConn }}{{ end }}
    {{- if $server.MaxQueue }} maxqueue {{ $server.MaxQueue }}{{ end }}
    {{- if $server.Secure }} ssl
        {{- if $server.Ciphers }} ciphers {{ $server.Ciphers }}{{ end }}
        {{- if $server.CipherSuites }} ciphersuites {{ $server.CipherSuites }}{{ end }}
        {{- if $server.Options }} {{ $server.Options }}{{ end }}
        {{- if $server.CrtFilename }} crt {{ $server.CrtFilename }}{{ end }}
        {{- if $server.SNI }} sni {{ $server.SNI }}{{ end }}
        {{- if $server.CAFilename }} verify required ca-file {{ $server.CAFilename }}
            {{- if $server.CRLFilename }} crl-file {{ $server.CRLFilename }}{{ end }}
            {{- if $server.VerifyHost }} verifyhost {{ $server.VerifyHost }}{{ end }}
        {{- else }} verify none
        {{- end }}
    {{- end }}
    {{- if $server.SendProxy }} {{ $server.SendProxy }}{{ end }}
    {{- $agent := $backend.AgentCheck }}
    {{- $hc := $backend.HealthCheck }}
    {{- if or $hc.Port $hc.Addr $hc.Interval $hc.RiseCount $hc.FallCount }} check
        {{- if $hc.Port }} port {{ $hc.Port }}{{ end }}
        {{- if $hc.Addr }} addr {{ $hc.Addr }}{{ end }}
        {{- if $hc.Interval }} inter {{ $hc.Interval }}{{ end }}
        {{- if $hc.RiseCount }} rise {{ $hc.RiseCount }}{{ end }}
        {{- if $hc.FallCount }} fall {{ $hc.FallCount }}{{ end }}
    {{- end }}
    {{- if $agent.Port }} agent-check agent-port {{ $agent.Port }}
        {{- if $agent.Addr }} agent-addr {{ $agent.Addr }}{{ end }}
        {{- if $agent.Interval }} agent-inter {{ $agent.Interval }}{{ end }}
        {{- if $agent.Send }} agent-send {{ $agent.Send }}{{ end }}
    {{- end }}
{{- end }}


{{- define "backend-support" }}
{{- $global := .p1 }}
{{- $backends := .p2 }}

{{- if $backends.HasBackend "_redirect_https" }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Support
#
backend _redirect_https
    mode http
{{- range $snippet := index $global.CustomProxy "_redirect_https" }}
    {{ $snippet }}
{{- end }}
    http-request redirect scheme https
        {{- if $global.SSL.RedirectCode }} code {{ $global.SSL.RedirectCode }}{{ end }}
{{- end }}

{{- if $global.Acme.Enabled }}

  # # # # # # # # # # # # # # # # # # #
# #
#     acme challenge server
#
backend _acme_challenge
    mode http
{{- range $snippet := index $global.CustomProxy "_acme_challenge" }}
    {{ $snippet }}
{{- end }}
    server _acme_server unix@{{ $global.Acme.Socket }}
{{- end }}

{{- if $backends.HasBackend "_error404" }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Error pages
#
backend _error404
    mode http
{{- range $snippet := index $global.CustomProxy "_error404" }}
    {{ $snippet }}
{{- end }}
{{- if $global.DefaultBackendRedir }}
    redirect location {{ $global.DefaultBackendRedir }} code {{ $global.DefaultBackendRedirCode }}
{{- else }}
    http-request use-service lua.send-404
{{- end }}
{{- end }}

{{- end }}{{/* define "backend-support" */}}


{{- define "frontends" }}
{{- $global := .p1 }}
{{- $frontends := .p2 }}
{{- $backends := .p3 }}
{{- $tcpservices := .p4 }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   FRONTENDS
# #
#
{{- if $frontends.AuthProxy.BindList }}

{{- $proxy := $frontends.AuthProxy }}
{{- $use_socket := gt (len $proxy.BindList) 1 }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Authentication External
#
### helper backends used by auth-request.lua
### using tcp ports - haproxy-lua-http.lua doesn't support unix socket
{{- range $bind := $proxy.BindList }}
backend {{ $bind.AuthBackendName }}
    mode http
{{- range $snippet := index $global.CustomProxy $bind.AuthBackendName }}
    {{ $snippet }}
{{- end }}
    server {{ $bind.AuthBackendName }} 127.0.0.1:{{ $bind.LocalPort }}
{{- end }}

{{- /*------------------------------------*/}}
frontend {{ $proxy.Name }}
    mode http
{{- range $bind := $proxy.BindList }}
    bind 127.0.0.1:{{ $bind.LocalPort }}
        {{- if $use_socket }} id {{ $bind.SocketID }}{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.AuthLogFormat "default" }}
    option httplog
{{- else if $global.Syslog.AuthLogFormat }}
    log-format {{ $global.Syslog.AuthLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := index $global.CustomProxy $proxy.Name }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $bind := $proxy.BindList }}
    use_backend {{ $bind.Backend }}
        {{- if $use_socket }} if { so_id {{ $bind.SocketID }} }{{ end }}
{{- end }}
{{- end }}

{{- if $tcpservices }}

  # # # # # # # # # # # # # # # # # # #
# #
#     TCP SERVICES frontends
#
{{- range $tcpport := $tcpservices }}
{{- $proxy_name := printf "_front_tcp_%d" $tcpport.Port }}
frontend {{ $proxy_name }}
{{- $hasTLS := $tcpport.HasTLS }}
    bind {{ $global.TCPBindIP }}:{{ $tcpport.Port }}
        {{- if $tcpport.ProxyProt }} accept-proxy{{ end }}
        {{- if $hasTLS }}
            {{- "" }} ssl crt-list {{ $global.LocalFSPrefix }}/etc/haproxy/crtlist_tcp_{{ $tcpport.Port }}.list
            {{- "" }} ca-ignore-err all crt-ignore-err all
        {{- end }}
    mode tcp

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $tcpport.LogFormat "default" }}
    option tcplog
{{- else if $tcpport.LogFormat }}
    log-format {{ $tcpport.LogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /* it is possible to have SNIMap without TLS, this means a SNI based hostname */}}
{{- /* selection for TLS content, whose ssl offload is made in the backend. */}}
{{- if $tcpport.SNIMap.HasHost }}
{{- if not $hasTLS }}
    tcp-request inspect-delay 5s
{{- end }}
{{- range $match := $tcpport.SNIMap.MatchFiles }}
    tcp-request content set-var(req.tcpback) {{ if $hasTLS }}ssl_fc_sni{{ else }}req.ssl_sni{{ end }},lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.tcpback) -m found }{{ end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := index $global.CustomProxy $proxy_name }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := $tcpport.CustomConfig }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $tcpport.SNIMap.HasHost }}
{{- if not $hasTLS }}
    tcp-request content accept if { req.ssl_hello_type 1 }
{{- end }}
    use_backend %[var(req.tcpback)] if { var(req.tcpback) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $tcpport.DefaultHost }}
{{- $backend := $tcpport.DefaultHost.Backend }}
{{- if not $backend.IsEmpty }}
    default_backend {{ $backend }}
{{- end }}
{{- end }}
{{- end }}{{/* range $tcpservices */}}
{{- end }}{{/* has $tcpservices */}}

{{- $hasHTTPResponses := $frontends.HasHTTPResponses }}
{{- $hasSomeFrontingProxy := $frontends.HasSomeFrontingProxy }}
{{- $hasSomeFrontingUseProto := $frontends.HasSomeFrontingUseProto }}
{{- range $frontend := $frontends.Items }}

{{- $isFrontingProxy := $frontend.IsFrontingProxy }}
{{- $isFrontingUseProto := $frontend.IsFrontingUseProto }}
{{- $httpmaps := $frontend.HTTPMaps }}
{{- $httpsmaps := $frontend.HTTPSMaps }}
{{- $hasSSLPassthrough := $frontend.HasSSLPassthrough }}

{{- if and $frontend.IsHTTPS $hasSSLPassthrough }}

  # # # # # # # # # # # # # # # # # # #
# #
#     TCP/TLS frontend
#
listen {{ $frontend.TLSProxyName }}
    mode tcp
    bind {{ $frontend.Bind }}{{ if $frontend.AcceptProxy }} accept-proxy{{ end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if eq $global.Syslog.HTTPSLogFormat "default" }}
    option tcplog
{{- else if $global.Syslog.HTTPSLogFormat }}
    log-format {{ $global.Syslog.HTTPSLogFormat }}
{{- else }}
    no log
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    tcp-request inspect-delay 5s

{{- /*------------------------------------*/}}
{{- range $match := $frontend.HTTPSMaps.SSLPassthroughMap.MatchFiles }}
    tcp-request content set-var(req.sslpassback) req.ssl_sni,lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.sslpassback) -m found }{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := index $global.CustomProxy $frontend.TLSProxyName }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
    tcp-request content accept if { req.ssl_hello_type 1 }

{{- /*------------------------------------*/}}
    use_backend %[var(req.sslpassback)] if { var(req.sslpassback) -m found }
{{- $defaultHost := $frontend.DefaultHost }}
{{- if $defaultHost }}
{{- if $defaultHost.SSLPassthrough }}
{{- range $path := $defaultHost.Paths }}
{{- if eq $path.Path "/" }}
    use_backend {{ $path.Backend.ID }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
    server _default_server{{ $frontend.Name }}_socket {{ $frontend.HTTPSSocket }} send-proxy-v2
{{- end }}{{/* HasSSLPassthrough */}}

{{- if $httpmaps }}

  # # # # # # # # # # # # # # # # # # #
# #
#     {{ if $isFrontingProxy }}Fronting Proxy{{ else }}HTTP{{ end }} frontend
#
frontend {{ $frontend.Name }}
    mode http
{{- with $frontend.Bind }}
    bind {{ . }}{{ if $frontend.AcceptProxy }} accept-proxy{{ end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if $global.Syslog.HTTPLogFormat }}
    log-format {{ $global.Syslog.HTTPLogFormat }}
{{- else }}
    option httplog
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontendEarly }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $global.Acme.Enabled }}
    acl acme-challenge path_beg {{ $global.Acme.Prefix }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if and $isFrontingProxy $hasSomeFrontingProxy }}
    http-request set-var(req.fronting_proxy) str(1)
{{- end }}
{{- if $hasSomeFrontingUseProto }}
    http-request set-var(req.fronting_proto) str({{ if $isFrontingUseProto }}use{{ else }}ignore{{ end }})
{{- end }}
    http-request set-var(req.path) path
    http-request set-var(req.host) hdr(host),field(1,:),lower
    http-request set-var(req.base) var(req.host),concat(\#,req.path)

{{- $acmeexclusive := and $global.Acme.Enabled (not $global.Acme.Shared) }}

{{- /*------------------------------------*/}}
{{- if $httpmaps.RedirRootSSLMap.HasHost }}
{{- range $match := $httpmaps.RedirRootSSLMap.MatchFiles }}
    http-request redirect scheme https
        {{- if $global.SSL.RedirectCode }} code {{ $global.SSL.RedirectCode }}{{ end }}
        {{- "" }} if{{ if $acmeexclusive }} !acme-challenge{{ end }}
        {{- "" }} { path / } { var(req.host) -i -m {{ $match.Method }} -f {{ $match.Filename }} }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $httpmaps.RedirFromRootMap.HasHost }}
{{- range $match := $httpmaps.RedirFromRootMap.MatchFiles }}
    http-request set-var(req.rootredir) var(req.host)
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.rootredir) -m found }{{ end }}
{{- end }}
    http-request redirect location %[var(req.rootredir)]
        {{- "" }} if{{ if $acmeexclusive }} !acme-challenge{{ end }}
        {{- "" }} { path / } { var(req.rootredir) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $httpmaps.VarNamespaceMap.HasHost }}
{{- range $match := $httpmaps.VarNamespaceMap.MatchFiles }}
    http-request set-var(txn.namespace) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- template "httpFilters" map $match "txn.namespace" 1 }}
{{- end }}
    http-request set-var(txn.namespace) str(-)
        {{- "" }} if !{ var(txn.namespace) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if not $isFrontingProxy }}
    http-request set-header X-Forwarded-Proto http
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-CN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-DN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA2
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-Cert
{{- end }}

{{- /*------------------------------------*/}}
{{- template "redirectTo" map $global $frontend $httpmaps }}

{{- /*------------------------------------*/}}
{{- template "authExternalFrontend" map $frontend }}

{{- /*------------------------------------*/}}
{{- range $match := $httpmaps.HTTPHostMap.MatchFiles }}
    http-request set-var(req.backend) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- template "httpFilters" map $match "req.backend" 1 }}
{{- end }}
{{- range $match := $httpmaps.DefaultHostMap.MatchFiles }}
    http-request set-var(req.defaultbackend) str(<default>\#),concat(,req.path)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- "" }} if !{ var(req.backend) -m found }
        {{- template "httpFilters" map $match "req.defaultbackend" 0 }}
{{- end }}

{{- /*------------------------------------*/}}
{{- template "redirectFrom" map $global $frontend $httpmaps "req.backend" }}

{{- /*------------------------------------*/}}
{{- template "sourceIP" map $global }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontendLate }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $frontend.Name }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $acmeexclusive }}
    use_backend _acme_challenge if acme-challenge
{{- end }}
    use_backend %[var(req.backend)] if { var(req.backend) -m found }
{{- if and $global.Acme.Enabled $global.Acme.Shared }}
    use_backend _acme_challenge if acme-challenge
{{- end }}

{{- template "defaultbackend" map $frontend $backends }}
{{- end }}{{/* if $httpmaps */}}

{{- if $httpsmaps }}

  # # # # # # # # # # # # # # # # # # #
# #
#     HTTPS frontend
#
{{- $httpsFrontendName := printf "%s%s" $frontend.Name (iif $hasSSLPassthrough "__local" "") }}
frontend {{ $httpsFrontendName }}
    mode http

{{- /*------------------------------------*/}}
    bind {{ default $frontend.Bind $frontend.HTTPSSocket }}
        {{- if $frontend.HTTPSProxy }} accept-proxy{{ end }}
        {{- "" }} ssl alpn {{ $global.SSL.ALPN }}
        {{- "" }} crt-list {{ $frontend.CrtListFile }}
        {{- "" }} ca-ignore-err all crt-ignore-err all

{{- /*------------------------------------*/}}
{{- if $global.Syslog.Endpoint }}
{{- if $global.Syslog.HTTPLogFormat }}
    log-format {{ $global.Syslog.HTTPLogFormat }}
{{- else }}
    option httplog
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontendEarly }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-var(req.path) path
    http-request set-var(req.host) hdr(host),field(1,:),lower
    http-request set-var(req.base) var(req.host),concat(\#,req.path)

{{- /*------------------------------------*/}}
{{- template "redirectTo" map $global $frontend $httpsmaps }}

{{- /*------------------------------------*/}}
{{- template "authExternalFrontend" map $frontend }}

{{- /*------------------------------------*/}}
{{- range $match := $httpsmaps.HTTPSHostMap.MatchFiles }}
    http-request set-var(req.hostbackend) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- template "httpFilters" map $match "req.hostbackend" 1 }}
{{- end }}
{{- range $match := $httpsmaps.DefaultHostMap.MatchFiles }}
    http-request set-var(req.defaultbackend) str(<default>\#),concat(,req.path)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- "" }} if !{ var(req.hostbackend) -m found }
        {{- template "httpFilters" map $match "req.defaultbackend" 0 }}
{{- end }}

{{- /*------------------------------------*/}}
{{- template "redirectFrom" map $global $frontend $httpsmaps "req.hostbackend" }}

{{- /*------------------------------------*/}}
{{- if $httpsmaps.RedirFromRootMap.HasHost }}
{{- range $match := $httpsmaps.RedirFromRootMap.MatchFiles }}
    http-request set-var(req.rootredir) var(req.host)
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if not $match.First }} if !{ var(req.rootredir) -m found }{{ end }}
{{- end }}
    http-request redirect location %[var(req.rootredir)] if { path / } { var(req.rootredir) -m found }
{{- end }}

{{- /*------------------------------------*/}}
{{- if $httpsmaps.VarNamespaceMap.HasHost }}
{{- range $match := $httpsmaps.VarNamespaceMap.MatchFiles }}
    http-request set-var(txn.namespace) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- template "httpFilters" map $match "txn.namespace" 1 }}
{{- end }}
    http-request set-var(txn.namespace) str(-)
        {{- "" }} if !{ var(txn.namespace) -m found }
{{- end }}

{{- /*------------------------------------*/}}
    http-request set-header X-Forwarded-Proto https
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-CN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-DN
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA1
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-SHA2
    http-request del-header {{ $global.SSL.HeadersPrefix }}-Client-Cert

{{- /*------------------------------------*/}}
{{- template "sourceIP" map $global }}

{{- /*------------------------------------*/}}
{{- $hasTLSAuth := or $frontend.HasTLSAuth  }}
{{- if $hasTLSAuth }}
{{- $mandatory := $httpsmaps.TLSNeedCrtList.HasHost }}
    acl tls-has-crt ssl_c_used

{{- if $mandatory }}
{{- range $match := $httpsmaps.TLSNeedCrtList.MatchFiles }}
    acl tls-need-crt ssl_fc_sni -i -m {{ $match.Method }} -f {{ $match.Filename }}
{{- end }}
{{- end }}

{{- range $match := $httpsmaps.TLSNeedCrtList.MatchFiles }}
    acl tls-host-need-crt var(req.host) -i -m {{ $match.Method }} -f {{ $match.Filename }}
{{- end }}
    acl tls-has-invalid-crt ssl_c_verify gt 0
{{- range $match := $httpsmaps.TLSAuthList.MatchFiles }}
    acl tls-check-crt ssl_fc_sni -i -m {{ $match.Method }} -f {{ $match.Filename }}
{{- end }}

{{- if $mandatory }}
{{- if not $httpsmaps.TLSMissingCrtPagesMap.HasHost }}
    http-request set-var(req.tls_nocrt_redir) str(_internal) if !tls-has-crt tls-need-crt
{{- end }}
{{- range $match := $httpsmaps.TLSMissingCrtPagesMap.MatchFiles }}
    http-request set-var(req.tls_nocrt_redir) ssl_fc_sni,lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }},_internal) if
        {{- if $match.First }} !tls-has-crt tls-need-crt
        {{- else }} { var(req.tls_nocrt_redir) -m str _internal }{{ end }}
{{- end }}
{{- end }}

{{- if $httpsmaps.TLSAuthList.HasHost }}
{{- if not $httpsmaps.TLSInvalidCrtPagesMap.HasHost }}
    http-request set-var(req.tls_invalidcrt_redir) str(_internal) if tls-has-invalid-crt tls-check-crt
{{- end }}
{{- range $match := $httpsmaps.TLSInvalidCrtPagesMap.MatchFiles }}
    http-request set-var(req.tls_invalidcrt_redir) ssl_fc_sni,lower
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }},_internal) if
        {{- if $match.First }} tls-has-invalid-crt tls-check-crt
        {{- else }} { var(req.tls_invalidcrt_redir) -m str _internal }{{ end }}
{{- end }}
{{- if and $mandatory $httpsmaps.TLSMissingCrtPagesMap.HasHost }}
    http-request redirect location %[var(req.tls_nocrt_redir)] code 303
        {{- "" }} if { var(req.tls_nocrt_redir) -m found } !{ var(req.tls_nocrt_redir) -m str _internal }
{{- end }}
{{- if $httpsmaps.TLSInvalidCrtPagesMap.HasHost }}
    http-request redirect location %[var(req.tls_invalidcrt_redir)] code 303
        {{- "" }} if { var(req.tls_invalidcrt_redir) -m found } !{ var(req.tls_invalidcrt_redir) -m str _internal }
{{- end }}
{{- end }}

{{- end }}{{/* if $hasTLSAuth */}}

{{- /*------------------------------------*/}}
{{- range $snippet := $global.CustomFrontendLate }}
    {{ $snippet }}
{{- end }}
{{- range $snippet := index $global.CustomProxy $httpsFrontendName }}
    {{ $snippet }}
{{- end }}

{{- /*------------------------------------*/}}
{{- if $hasTLSAuth }}
{{- if $hasHTTPResponses }}
    http-request set-var(txn.lua_scope) str({{ $frontend.Name }}),concat(--,req.host)
{{- end }}
    http-request use-service lua.send-421 if
        {{- "" }} tls-has-crt { ssl_fc_has_sni } !{ ssl_fc_sni,strcmp(req.host) eq 0 }
{{- if $httpsmaps.TLSAuthList.HasHost }}
{{- if $httpsmaps.TLSNeedCrtList.HasHost }}
    http-request use-service lua.send-496 if
        {{- "" }} { var(req.tls_nocrt_redir) -m str _internal }
{{- /* HTTP 421 instead of 404 if missing sni or the provided one doesn't read client crt. */}}
{{- /* Waiting move the tls-auth stuff to the backend to implement a proper config. */}}
    http-request use-service lua.send-421 if
        {{- "" }} !tls-has-crt tls-host-need-crt
{{- end }}
    http-request use-service lua.send-495 if
        {{- "" }} { var(req.tls_invalidcrt_redir) -m str _internal }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
    use_backend %[var(req.hostbackend)]
        {{- "" }} if { var(req.hostbackend) -m found }
{{- if $hasTLSAuth }}
    use_backend %[var(req.snibackend)]
        {{- "" }} if { var(req.snibackend) -m found }
{{- end }}
{{- template "defaultbackend" map $frontend $backends }}

{{- end }}{{/* if $httpsmaps */}}
{{- end }}{{/* range $frontends */}}
{{- end }}{{/* define "frontends" */}}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "redirectFrom" }}
{{- $global := .p1 }}
{{- $frontend := .p2 }}
{{- $fmaps := .p3 }}
{{- $varbe := .p4 }}
{{- if $fmaps.RedirFromMap.MatchFiles }}
{{- range $match := $fmaps.RedirFromMap.MatchFiles }}
    http-request set-var(req.redirdest) var(req.host)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- "" }} if
        {{- if $global.NoRedirects }} !{ path_beg{{ range $global.NoRedirects }} "{{ . }}"{{ end }} }{{ end }}
        {{- "" }} !{ var({{ $varbe }}) -m found }
        {{- if not $match.First }} !{ var(req.redirdest) -m found }{{ end }}
{{- end }}
    http-request redirect prefix //%[var(req.redirdest)]
        {{- "" }} code {{ $frontend.RedirectFromCode }}
        {{- "" }} if
        {{- if $global.NoRedirects }} !{ path_beg{{ range $global.NoRedirects }} "{{ . }}"{{ end }} }{{ end }}
        {{- "" }} { var(req.redirdest) -m found }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "sourceIP" }}
{{- $global := .p1 }}
{{- if eq $global.ForwardFor "add" }}
{{- if $global.OriginalForwardedForHdr }}
    http-request set-header {{ $global.OriginalForwardedForHdr }} %[hdr(x-forwarded-for)] if { hdr(x-forwarded-for) -m found }
{{- end }}
    http-request del-header x-forwarded-for
    option forwardfor
{{- else if eq $global.ForwardFor "update" }}
    option forwardfor
{{- else if eq $global.ForwardFor "ifmissing" }}
    option forwardfor if-none
{{- end }}
{{- if $global.RealIPHdr }}
    http-request set-header {{ $global.RealIPHdr }} %[src]
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "redirectTo" }}
{{- $global := .p1 }}
{{- $frontend := .p2 }}
{{- $fmaps := .p3 }}
{{- if $fmaps.RedirToMap.MatchFiles }}
{{- range $match := $fmaps.RedirToMap.MatchFiles }}
    http-request set-var(req.redirto) var(req.base)
        {{- if $match.Lower }},lower{{ end }}
        {{- "" }},map_{{ $match.Method }}({{ $match.Filename }})
        {{- if $global.NoRedirects }} if !{ path_beg{{ range $global.NoRedirects }} "{{ . }}"{{ end }} }{{ end }}
        {{- template "httpFilters" map $match "req.redirto" (not $global.NoRedirects) }}
{{- end }}
    http-request redirect location %[var(req.redirto)]
        {{- "" }} code {{ $frontend.RedirectToCode }}
        {{- "" }} if
        {{- if $global.NoRedirects }} !{ path_beg{{ range $global.NoRedirects }} "{{ . }}"{{ end }} }{{ end }}
        {{- "" }} { var(req.redirto) -m found }
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "authExternal" }}
{{- $auth := .p1 }}
{{- $condition := .p2 }}
{{- if $auth.AlwaysDeny }}
    http-request deny
        {{- if $condition }} if {{ $condition }}{{ end }}
{{- else }}
{{- if $auth.AuthBackendName }}
    http-request lua.auth-intercept {{ $auth.AuthBackendName }} {{ $auth.AuthPath }} {{ $auth.Method }}
        {{- printf " '%s' '%s' '%s'" ($auth.HeadersRequest | join ",") ($auth.HeadersSucceed | join ",") ($auth.HeadersFail | join ",") }}
        {{- if or $auth.AllowedPath $condition }} if{{ end }}
        {{- if $auth.AllowedPath }} !{ path_beg {{ $auth.AllowedPath }} }{{ end }}
        {{- if $condition }} {{ $condition }}{{ end }}
{{- if $auth.RedirectOnFail }}
    http-request redirect location {{ $auth.RedirectOnFail }}
{{- else }}
    http-request deny
{{- end }}
        {{- "" }} if !{ var(txn.auth_response_successful) -m bool }
        {{- if $auth.AllowedPath }} !{ path_beg {{ $auth.AllowedPath }} }{{ end }}
        {{- if $condition }} {{ $condition }}{{ end }}
{{- range $header, $attr := $auth.HeadersVars }}
    http-request set-header {{ $header }} %[var({{ $attr }})] if { var({{ $attr }}) -m found }
        {{- if $auth.AllowedPath }} !{ path_beg {{ $auth.AllowedPath }} }{{ end }}
        {{- if $condition }} {{ $condition }}{{ end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "authExternalFrontend" }}
{{- $frontend := .p1 }}
{{- range $host := $frontend.Hosts }}
{{- range $path := $host.Paths }}
{{- if $path.AuthExtFront.AuthPath }}
{{- template "authExternal" map $path.AuthExtFront (printf "{ var(req.base) -m str %s '%s' }" $path.Link.HAMatch $path.Link.Key) }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "httpFilters" }}
{{- $match := .p1 }}
{{- $varbe := .p2 }}
{{- $missingIfStmt := .p3 }}
{{- if $missingIfStmt }}
    {{- if or $match.Headers (and $varbe (not $match.First)) }} if{{ end }}
{{- end }}
{{- if and $varbe (not $match.First) }} !{ var({{ $varbe }}) -m found }{{ end }}
{{- if $match.Headers }}
    {{- range $header := $match.Headers }} { hdr({{ $header.Name }}){{ if $header.Regex }} -m reg{{ end }} -- {{ $header.Value | haquote }} }{{ end }}
{{- end }}
{{- end }}

{{- /*------------------------------------*/}}
{{- /*------------------------------------*/}}
{{- define "defaultbackend" }}
{{- $frontend := .p1 }}
{{- $backends := .p2 }}
{{- $defaultHost := $frontend.DefaultHost }}
{{- $defaultBackend := $backends.DefaultBackend }}
{{- if $defaultHost }}
{{- if not $defaultHost.SSLPassthrough }}
    use_backend %[var(req.defaultbackend)]
{{- end }}
{{- end }}
    default_backend {{ $defaultBackend.ID }}
{{- end }}

{{- define "frontend-support" }}
{{- $global := .p1 }}


  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# #
# #   SUPPORT
# #
#

  # # # # # # # # # # # # # # # # # # #
# #
#     Stats
#
listen stats
    mode http
    bind {{ $global.Stats.BindIP }}:{{ $global.Stats.Port }}
        {{- if $global.Stats.TLSFilename }} ssl crt {{ $global.Stats.TLSFilename }}{{ end }}
        {{- if $global.Stats.AcceptProxy }} accept-proxy{{ end }}
        {{- if gt $global.Procs.Nbproc 1 }} process 1{{ end }}
{{- if $global.Stats.Auth }}
    stats realm HAProxy\ Statistics
    stats auth {{ $global.Stats.Auth }}
{{- end }}
    stats enable
    stats uri /
    no log
    option httpclose
    stats show-legends
{{- range $snippet := index $global.CustomProxy "stats" }}
    {{ $snippet }}
{{- end }}

{{- if $global.Prometheus.Port }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Prometheus metrics
#
frontend prometheus
    mode http
    bind {{ $global.Prometheus.BindIP }}:{{ $global.Prometheus.Port }}
    http-request use-service prometheus-exporter if { path /metrics }
    http-request use-service lua.send-prometheus-root if { path / }
    http-request use-service lua.send-404
    no log
{{- range $snippet := index $global.CustomProxy "prometheus" }}
    {{ $snippet }}
{{- end }}
{{- end }}

  # # # # # # # # # # # # # # # # # # #
# #
#     Monitor URI
#
frontend healthz
    mode http
    bind {{ $global.Healthz.BindIP }}:{{ $global.Healthz.Port }}
    monitor-uri /healthz
    http-request use-service lua.send-404
    no log
{{- range $snippet := index $global.CustomProxy "healthz" }}
    {{ $snippet }}
{{- end }}

{{- if $global.ModSecurity.Endpoints }}

  # # # # # # # # # # # # # # # # # # #
# #
#     ModSecurity Agent
#
backend spoe-modsecurity
    mode tcp
    timeout connect {{ $global.ModSecurity.Timeout.Connect }}
    timeout server  {{ $global.ModSecurity.Timeout.Server }}
{{- range $snippet := index $global.CustomProxy "spoe-modsecurity" }}
    {{ $snippet }}
{{- end }}
{{- range $i, $endpoint := $global.ModSecurity.Endpoints }}
    server modsec-spoa{{ $i }} {{ $endpoint }}
{{- end }}
{{- end }}

{{- end }}{{/* define "frontend-support" */}}
